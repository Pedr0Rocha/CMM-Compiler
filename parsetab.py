
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'NUM PLUS MINUS MULT DIV MOD LPAREN RPAREN LBRAC RBRAC LCBRAC RCBRAC COLON SCOLON COMMA QMARK NOT AND OR GREATER EQUAL LESS ATTR DIFF LESSEQ GREATEQ AVALPLUS AVALMINUS AVALMULT AVALDIV AVALMOD ID FUNCTION THEN RETURN STRING INT VOID ELSE BREAK FALSE TRUE IF FOR WHILE BOOL MAINprogram : decSeqdec : varDec\n           | decFunc\n           | decProcdecFunc : type ID LPAREN paramList RPAREN LCBRAC block RCBRACdecProc : ID LPAREN paramList RPAREN LCBRAC block RCBRACvarDec : type varSpecSeq SCOLONvarSpec : ID\n               | ID ATTR literal\n               | ID LBRAC num RBRAC\n               | ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRACvarSpecSeq : varSpec COMMA varSpecSeq\n                  | varSpecparamList : block : literal : numliteralSeq : type : INT\n            | STRING\n            | BOOLdecSeq : dec decSeq\n              | decempty :binop : num PLUS num\n             | num MINUS num\n             | num DIV num\n             | num MULT numnum : NUM'
    
_lr_action_items = {'LBRAC':([16,25,],[20,20,]),'RPAREN':([12,17,21,28,],[-14,23,-14,33,]),'STRING':([0,1,2,8,10,19,37,41,],[11,-2,-4,11,-3,-7,-6,-5,]),'RBRAC':([26,27,],[32,-28,]),'INT':([0,1,2,8,10,19,37,41,],[3,-2,-4,3,-3,-7,-6,-5,]),'LCBRAC':([23,33,35,],[31,36,38,]),'SCOLON':([14,15,16,24,25,27,29,30,32,42,],[-13,19,-8,-12,-8,-28,-9,-16,-10,-11,]),'RCBRAC':([31,34,36,38,39,40,],[-15,37,-15,-17,41,42,]),'NUM':([20,22,],[27,27,]),'BOOL':([0,1,2,8,10,19,37,41,],[7,-2,-4,7,-3,-7,-6,-5,]),'ATTR':([16,25,32,],[22,22,35,]),'LPAREN':([5,16,],[12,21,]),'COMMA':([14,16,25,27,29,30,32,42,],[18,-8,-8,-28,-9,-16,-10,-11,]),'ID':([0,1,2,3,7,8,9,10,11,18,19,37,41,],[5,-2,-4,-18,-20,5,16,-3,-19,25,-7,-6,-5,]),'$end':([1,2,4,6,8,10,13,19,37,41,],[-2,-4,-1,0,-22,-3,-21,-7,-6,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'varDec':([0,8,],[1,1,]),'num':([20,22,],[26,30,]),'decProc':([0,8,],[2,2,]),'decSeq':([0,8,],[4,13,]),'varSpec':([9,18,],[14,14,]),'literal':([22,],[29,]),'program':([0,],[6,]),'paramList':([12,21,],[17,28,]),'literalSeq':([38,],[40,]),'varSpecSeq':([9,18,],[15,24,]),'dec':([0,8,],[8,8,]),'type':([0,8,],[9,9,]),'decFunc':([0,8,],[10,10,]),'block':([31,36,],[34,39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> decSeq','program',1,'p_program','yacc.py',13),
  ('dec -> varDec','dec',1,'p_dec','yacc.py',17),
  ('dec -> decFunc','dec',1,'p_dec','yacc.py',18),
  ('dec -> decProc','dec',1,'p_dec','yacc.py',19),
  ('decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC','decFunc',8,'p_decFunc','yacc.py',23),
  ('decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC','decProc',7,'p_decProc','yacc.py',27),
  ('varDec -> type varSpecSeq SCOLON','varDec',3,'p_varDec','yacc.py',31),
  ('varSpec -> ID','varSpec',1,'p_varSpec','yacc.py',35),
  ('varSpec -> ID ATTR literal','varSpec',3,'p_varSpec','yacc.py',36),
  ('varSpec -> ID LBRAC num RBRAC','varSpec',4,'p_varSpec','yacc.py',37),
  ('varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC','varSpec',8,'p_varSpec','yacc.py',38),
  ('varSpecSeq -> varSpec COMMA varSpecSeq','varSpecSeq',3,'p_varSpecSeq','yacc.py',49),
  ('varSpecSeq -> varSpec','varSpecSeq',1,'p_varSpecSeq','yacc.py',50),
  ('paramList -> <empty>','paramList',0,'p_paramList','yacc.py',57),
  ('block -> <empty>','block',0,'p_block','yacc.py',61),
  ('literal -> num','literal',1,'p_literal','yacc.py',65),
  ('literalSeq -> <empty>','literalSeq',0,'p_lirealSeq','yacc.py',69),
  ('type -> INT','type',1,'p_type','yacc.py',73),
  ('type -> STRING','type',1,'p_type','yacc.py',74),
  ('type -> BOOL','type',1,'p_type','yacc.py',75),
  ('decSeq -> dec decSeq','decSeq',2,'p_decSeq','yacc.py',79),
  ('decSeq -> dec','decSeq',1,'p_decSeq','yacc.py',80),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',87),
  ('binop -> num PLUS num','binop',3,'p_binop','yacc.py',95),
  ('binop -> num MINUS num','binop',3,'p_binop','yacc.py',96),
  ('binop -> num DIV num','binop',3,'p_binop','yacc.py',97),
  ('binop -> num MULT num','binop',3,'p_binop','yacc.py',98),
  ('num -> NUM','num',1,'p_num','yacc.py',102),
]
