Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    VOID
    FUNCTION

Grammar

Rule 0     S' -> program
Rule 1     program -> decSeq
Rule 2     dec -> varDec
Rule 3     dec -> decFunc
Rule 4     dec -> decProc
Rule 5     decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC
Rule 6     decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC
Rule 7     decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC
Rule 8     decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC
Rule 9     varDec -> type varSpecSeq SCOLON
Rule 10    varSpec -> ID
Rule 11    varSpec -> ID ATTR literal
Rule 12    varSpec -> ID LBRAC num RBRAC
Rule 13    varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC
Rule 14    varSpecSeq -> varSpec COMMA varSpecSeq
Rule 15    varSpecSeq -> varSpec
Rule 16    literalSeq -> literal COMMA literalSeq
Rule 17    literalSeq -> literal
Rule 18    paramList -> paramSeq
Rule 19    paramList -> empty
Rule 20    param -> type ID
Rule 21    param -> type ID LBRAC RBRAC
Rule 22    block -> varDecList stmtList
Rule 23    varDecList -> varDec varDecList
Rule 24    varDecList -> empty
Rule 25    var -> ID
Rule 26    var -> ID LBRAC exp RBRAC
Rule 27    exp -> exp PLUS exp
Rule 28    exp -> exp MINUS exp
Rule 29    exp -> exp MULT exp
Rule 30    exp -> exp DIV exp
Rule 31    exp -> exp MOD exp
Rule 32    exp -> exp EQUAL exp
Rule 33    exp -> exp DIFF exp
Rule 34    exp -> exp LESSEQ exp
Rule 35    exp -> exp GREATEQ exp
Rule 36    exp -> exp GREATER exp
Rule 37    exp -> exp LESS exp
Rule 38    exp -> exp AND exp
Rule 39    exp -> exp OR exp
Rule 40    exp -> NOT exp
Rule 41    exp -> exp QMARK exp COLON exp
Rule 42    exp -> subCall
Rule 43    exp -> var
Rule 44    exp -> literal
Rule 45    exp -> LPAREN exp RPAREN
Rule 46    stmt -> ifStmt
Rule 47    stmt -> whileStmt
Rule 48    stmt -> forStmt
Rule 49    stmt -> breakStmt
Rule 50    stmt -> returnStmt
Rule 51    stmt -> readStmt
Rule 52    stmt -> writeStmt
Rule 53    stmt -> assign SCOLON
Rule 54    stmt -> subCall SCOLON
Rule 55    ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC
Rule 56    ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
Rule 57    whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC
Rule 58    forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
Rule 59    breakStmt -> BREAK SCOLON
Rule 60    returnStmt -> RETURN SCOLON
Rule 61    returnStmt -> RETURN exp SCOLON
Rule 62    readStmt -> READ var SCOLON
Rule 63    writeStmt -> WRITE expList SCOLON
Rule 64    assign -> var ATTR exp
Rule 65    assign -> var AVALPLUS exp
Rule 66    assign -> var AVALMINUS exp
Rule 67    assign -> var AVALMULT exp
Rule 68    assign -> var AVALDIV exp
Rule 69    assign -> var AVALMOD exp
Rule 70    subCall -> ID LBRAC expList RBRAC
Rule 71    expList -> expSeq
Rule 72    expList -> empty
Rule 73    expSeq -> exp COMMA expSeq
Rule 74    expSeq -> exp
Rule 75    stmtList -> stmt stmtList
Rule 76    stmtList -> empty
Rule 77    literal -> num
Rule 78    literal -> str
Rule 79    literal -> logic
Rule 80    num -> NUM
Rule 81    str -> STR
Rule 82    logic -> TRUE
Rule 83    logic -> FALSE
Rule 84    type -> INT
Rule 85    type -> STRING
Rule 86    type -> BOOL
Rule 87    decSeq -> dec decSeq
Rule 88    decSeq -> dec
Rule 89    paramSeq -> param COMMA paramSeq
Rule 90    paramSeq -> param
Rule 91    empty -> <empty>

Terminals, with rules where they appear

AND                  : 38
ATTR                 : 11 13 64
AVALDIV              : 68
AVALMINUS            : 66
AVALMOD              : 69
AVALMULT             : 67
AVALPLUS             : 65
BOOL                 : 86
BREAK                : 59
COLON                : 41
COMMA                : 14 16 73 89
DIFF                 : 33
DIV                  : 30
ELSE                 : 56
EQUAL                : 32
FALSE                : 83
FOR                  : 58
FUNCTION             : 
GREATEQ              : 35
GREATER              : 36
ID                   : 5 6 7 8 10 11 12 13 20 21 25 26 70
IF                   : 55 56
INT                  : 84
LBRAC                : 12 13 21 26 70
LCBRAC               : 5 6 7 8 13 55 56 56 57 58
LESS                 : 37
LESSEQ               : 34
LPAREN               : 5 6 7 8 45 55 56 57 58
MINUS                : 28
MOD                  : 31
MULT                 : 29
NOT                  : 40
NUM                  : 80
OR                   : 39
PLUS                 : 27
QMARK                : 41
RBRAC                : 12 13 21 26 70
RCBRAC               : 5 6 7 8 13 55 56 56 57 58
READ                 : 62
RETURN               : 60 61
RPAREN               : 5 6 7 8 45 55 56 57 58
SCOLON               : 9 53 54 58 58 59 60 61 62 63
STR                  : 81
STRING               : 85
THEN                 : 
TRUE                 : 82
VOID                 : 
WHILE                : 57
WRITE                : 63
error                : 6 7

Nonterminals, with rules where they appear

assign               : 53 58 58
block                : 5 6 8 55 56 56 57 58
breakStmt            : 49
dec                  : 87 88
decFunc              : 3
decProc              : 4
decSeq               : 1 87
empty                : 19 24 72 76
exp                  : 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 41 41 41 45 55 56 57 58 61 64 65 66 67 68 69 73 74
expList              : 63 70
expSeq               : 71 73
forStmt              : 48
ifStmt               : 46
literal              : 11 16 17 44
literalSeq           : 13 16
logic                : 79
num                  : 12 13 77
param                : 89 90
paramList            : 5 7 8
paramSeq             : 18 89
program              : 0
readStmt             : 51
returnStmt           : 50
stmt                 : 75
stmtList             : 22 75
str                  : 78
subCall              : 42 54
type                 : 5 6 7 9 20 21
var                  : 43 62 64 65 66 67 68 69
varDec               : 2 23
varDecList           : 22 23
varSpec              : 14 15
varSpecSeq           : 9 14
whileStmt            : 47
writeStmt            : 52

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . decSeq
    (87) decSeq -> . dec decSeq
    (88) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . decFunc
    (4) dec -> . decProc
    (9) varDec -> . type varSpecSeq SCOLON
    (5) decFunc -> . type ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (6) decFunc -> . type ID LPAREN error RPAREN LCBRAC block RCBRAC
    (7) decFunc -> . type ID LPAREN paramList RPAREN LCBRAC error RCBRAC
    (8) decProc -> . ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    ID              shift and go to state 5
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 1
    decProc                        shift and go to state 2
    decSeq                         shift and go to state 4
    program                        shift and go to state 6
    dec                            shift and go to state 8
    type                           shift and go to state 9
    decFunc                        shift and go to state 10

state 1

    (2) dec -> varDec .

    ID              reduce using rule 2 (dec -> varDec .)
    INT             reduce using rule 2 (dec -> varDec .)
    STRING          reduce using rule 2 (dec -> varDec .)
    BOOL            reduce using rule 2 (dec -> varDec .)
    $end            reduce using rule 2 (dec -> varDec .)


state 2

    (4) dec -> decProc .

    ID              reduce using rule 4 (dec -> decProc .)
    INT             reduce using rule 4 (dec -> decProc .)
    STRING          reduce using rule 4 (dec -> decProc .)
    BOOL            reduce using rule 4 (dec -> decProc .)
    $end            reduce using rule 4 (dec -> decProc .)


state 3

    (84) type -> INT .

    ID              reduce using rule 84 (type -> INT .)


state 4

    (1) program -> decSeq .

    $end            reduce using rule 1 (program -> decSeq .)


state 5

    (8) decProc -> ID . LPAREN paramList RPAREN LCBRAC block RCBRAC

    LPAREN          shift and go to state 12


state 6

    (0) S' -> program .



state 7

    (86) type -> BOOL .

    ID              reduce using rule 86 (type -> BOOL .)


state 8

    (87) decSeq -> dec . decSeq
    (88) decSeq -> dec .
    (87) decSeq -> . dec decSeq
    (88) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . decFunc
    (4) dec -> . decProc
    (9) varDec -> . type varSpecSeq SCOLON
    (5) decFunc -> . type ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (6) decFunc -> . type ID LPAREN error RPAREN LCBRAC block RCBRAC
    (7) decFunc -> . type ID LPAREN paramList RPAREN LCBRAC error RCBRAC
    (8) decProc -> . ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    $end            reduce using rule 88 (decSeq -> dec .)
    ID              shift and go to state 5
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 1
    decProc                        shift and go to state 2
    decSeq                         shift and go to state 13
    dec                            shift and go to state 8
    type                           shift and go to state 9
    decFunc                        shift and go to state 10

state 9

    (9) varDec -> type . varSpecSeq SCOLON
    (5) decFunc -> type . ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (6) decFunc -> type . ID LPAREN error RPAREN LCBRAC block RCBRAC
    (7) decFunc -> type . ID LPAREN paramList RPAREN LCBRAC error RCBRAC
    (14) varSpecSeq -> . varSpec COMMA varSpecSeq
    (15) varSpecSeq -> . varSpec
    (10) varSpec -> . ID
    (11) varSpec -> . ID ATTR literal
    (12) varSpec -> . ID LBRAC num RBRAC
    (13) varSpec -> . ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    ID              shift and go to state 16

    varSpec                        shift and go to state 14
    varSpecSeq                     shift and go to state 15

state 10

    (3) dec -> decFunc .

    ID              reduce using rule 3 (dec -> decFunc .)
    INT             reduce using rule 3 (dec -> decFunc .)
    STRING          reduce using rule 3 (dec -> decFunc .)
    BOOL            reduce using rule 3 (dec -> decFunc .)
    $end            reduce using rule 3 (dec -> decFunc .)


state 11

    (85) type -> STRING .

    ID              reduce using rule 85 (type -> STRING .)


state 12

    (8) decProc -> ID LPAREN . paramList RPAREN LCBRAC block RCBRAC
    (18) paramList -> . paramSeq
    (19) paramList -> . empty
    (89) paramSeq -> . param COMMA paramSeq
    (90) paramSeq -> . param
    (91) empty -> .
    (20) param -> . type ID
    (21) param -> . type ID LBRAC RBRAC
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    RPAREN          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    paramSeq                       shift and go to state 17
    param                          shift and go to state 19
    paramList                      shift and go to state 18
    type                           shift and go to state 21
    empty                          shift and go to state 20

state 13

    (87) decSeq -> dec decSeq .

    $end            reduce using rule 87 (decSeq -> dec decSeq .)


state 14

    (14) varSpecSeq -> varSpec . COMMA varSpecSeq
    (15) varSpecSeq -> varSpec .

    COMMA           shift and go to state 22
    SCOLON          reduce using rule 15 (varSpecSeq -> varSpec .)


state 15

    (9) varDec -> type varSpecSeq . SCOLON

    SCOLON          shift and go to state 23


state 16

    (5) decFunc -> type ID . LPAREN paramList RPAREN LCBRAC block RCBRAC
    (6) decFunc -> type ID . LPAREN error RPAREN LCBRAC block RCBRAC
    (7) decFunc -> type ID . LPAREN paramList RPAREN LCBRAC error RCBRAC
    (10) varSpec -> ID .
    (11) varSpec -> ID . ATTR literal
    (12) varSpec -> ID . LBRAC num RBRAC
    (13) varSpec -> ID . LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    LPAREN          shift and go to state 25
    COMMA           reduce using rule 10 (varSpec -> ID .)
    SCOLON          reduce using rule 10 (varSpec -> ID .)
    ATTR            shift and go to state 26
    LBRAC           shift and go to state 24


state 17

    (18) paramList -> paramSeq .

    RPAREN          reduce using rule 18 (paramList -> paramSeq .)


state 18

    (8) decProc -> ID LPAREN paramList . RPAREN LCBRAC block RCBRAC

    RPAREN          shift and go to state 27


state 19

    (89) paramSeq -> param . COMMA paramSeq
    (90) paramSeq -> param .

    COMMA           shift and go to state 28
    RPAREN          reduce using rule 90 (paramSeq -> param .)


state 20

    (19) paramList -> empty .

    RPAREN          reduce using rule 19 (paramList -> empty .)


state 21

    (20) param -> type . ID
    (21) param -> type . ID LBRAC RBRAC

    ID              shift and go to state 29


state 22

    (14) varSpecSeq -> varSpec COMMA . varSpecSeq
    (14) varSpecSeq -> . varSpec COMMA varSpecSeq
    (15) varSpecSeq -> . varSpec
    (10) varSpec -> . ID
    (11) varSpec -> . ID ATTR literal
    (12) varSpec -> . ID LBRAC num RBRAC
    (13) varSpec -> . ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    ID              shift and go to state 31

    varSpec                        shift and go to state 14
    varSpecSeq                     shift and go to state 30

state 23

    (9) varDec -> type varSpecSeq SCOLON .

    ID              reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    INT             reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    STRING          reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    BOOL            reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    $end            reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    IF              reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    WHILE           reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    FOR             reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    BREAK           reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    RETURN          reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    READ            reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    WRITE           reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    RCBRAC          reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)
    LCBRAC          reduce using rule 9 (varDec -> type varSpecSeq SCOLON .)


state 24

    (12) varSpec -> ID LBRAC . num RBRAC
    (13) varSpec -> ID LBRAC . num RBRAC ATTR LCBRAC literalSeq RCBRAC
    (80) num -> . NUM

    NUM             shift and go to state 33

    num                            shift and go to state 32

state 25

    (5) decFunc -> type ID LPAREN . paramList RPAREN LCBRAC block RCBRAC
    (6) decFunc -> type ID LPAREN . error RPAREN LCBRAC block RCBRAC
    (7) decFunc -> type ID LPAREN . paramList RPAREN LCBRAC error RCBRAC
    (18) paramList -> . paramSeq
    (19) paramList -> . empty
    (89) paramSeq -> . param COMMA paramSeq
    (90) paramSeq -> . param
    (91) empty -> .
    (20) param -> . type ID
    (21) param -> . type ID LBRAC RBRAC
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    error           shift and go to state 35
    RPAREN          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    paramSeq                       shift and go to state 17
    param                          shift and go to state 19
    paramList                      shift and go to state 34
    type                           shift and go to state 21
    empty                          shift and go to state 20

state 26

    (11) varSpec -> ID ATTR . literal
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    literal                        shift and go to state 38
    num                            shift and go to state 39
    str                            shift and go to state 40
    logic                          shift and go to state 41

state 27

    (8) decProc -> ID LPAREN paramList RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 43


state 28

    (89) paramSeq -> param COMMA . paramSeq
    (89) paramSeq -> . param COMMA paramSeq
    (90) paramSeq -> . param
    (20) param -> . type ID
    (21) param -> . type ID LBRAC RBRAC
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    paramSeq                       shift and go to state 44
    type                           shift and go to state 21
    param                          shift and go to state 19

state 29

    (20) param -> type ID .
    (21) param -> type ID . LBRAC RBRAC

    COMMA           reduce using rule 20 (param -> type ID .)
    RPAREN          reduce using rule 20 (param -> type ID .)
    LBRAC           shift and go to state 45


state 30

    (14) varSpecSeq -> varSpec COMMA varSpecSeq .

    SCOLON          reduce using rule 14 (varSpecSeq -> varSpec COMMA varSpecSeq .)


state 31

    (10) varSpec -> ID .
    (11) varSpec -> ID . ATTR literal
    (12) varSpec -> ID . LBRAC num RBRAC
    (13) varSpec -> ID . LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    COMMA           reduce using rule 10 (varSpec -> ID .)
    SCOLON          reduce using rule 10 (varSpec -> ID .)
    ATTR            shift and go to state 26
    LBRAC           shift and go to state 24


state 32

    (12) varSpec -> ID LBRAC num . RBRAC
    (13) varSpec -> ID LBRAC num . RBRAC ATTR LCBRAC literalSeq RCBRAC

    RBRAC           shift and go to state 46


state 33

    (80) num -> NUM .

    PLUS            reduce using rule 80 (num -> NUM .)
    MINUS           reduce using rule 80 (num -> NUM .)
    MULT            reduce using rule 80 (num -> NUM .)
    DIV             reduce using rule 80 (num -> NUM .)
    MOD             reduce using rule 80 (num -> NUM .)
    EQUAL           reduce using rule 80 (num -> NUM .)
    DIFF            reduce using rule 80 (num -> NUM .)
    LESSEQ          reduce using rule 80 (num -> NUM .)
    GREATEQ         reduce using rule 80 (num -> NUM .)
    GREATER         reduce using rule 80 (num -> NUM .)
    LESS            reduce using rule 80 (num -> NUM .)
    AND             reduce using rule 80 (num -> NUM .)
    OR              reduce using rule 80 (num -> NUM .)
    QMARK           reduce using rule 80 (num -> NUM .)
    SCOLON          reduce using rule 80 (num -> NUM .)
    RPAREN          reduce using rule 80 (num -> NUM .)
    COMMA           reduce using rule 80 (num -> NUM .)
    RBRAC           reduce using rule 80 (num -> NUM .)
    COLON           reduce using rule 80 (num -> NUM .)
    RCBRAC          reduce using rule 80 (num -> NUM .)


state 34

    (5) decFunc -> type ID LPAREN paramList . RPAREN LCBRAC block RCBRAC
    (7) decFunc -> type ID LPAREN paramList . RPAREN LCBRAC error RCBRAC

    RPAREN          shift and go to state 47


state 35

    (6) decFunc -> type ID LPAREN error . RPAREN LCBRAC block RCBRAC

    RPAREN          shift and go to state 48


state 36

    (83) logic -> FALSE .

    PLUS            reduce using rule 83 (logic -> FALSE .)
    MINUS           reduce using rule 83 (logic -> FALSE .)
    MULT            reduce using rule 83 (logic -> FALSE .)
    DIV             reduce using rule 83 (logic -> FALSE .)
    MOD             reduce using rule 83 (logic -> FALSE .)
    EQUAL           reduce using rule 83 (logic -> FALSE .)
    DIFF            reduce using rule 83 (logic -> FALSE .)
    LESSEQ          reduce using rule 83 (logic -> FALSE .)
    GREATEQ         reduce using rule 83 (logic -> FALSE .)
    GREATER         reduce using rule 83 (logic -> FALSE .)
    LESS            reduce using rule 83 (logic -> FALSE .)
    AND             reduce using rule 83 (logic -> FALSE .)
    OR              reduce using rule 83 (logic -> FALSE .)
    QMARK           reduce using rule 83 (logic -> FALSE .)
    SCOLON          reduce using rule 83 (logic -> FALSE .)
    COMMA           reduce using rule 83 (logic -> FALSE .)
    RPAREN          reduce using rule 83 (logic -> FALSE .)
    RBRAC           reduce using rule 83 (logic -> FALSE .)
    COLON           reduce using rule 83 (logic -> FALSE .)
    RCBRAC          reduce using rule 83 (logic -> FALSE .)


state 37

    (81) str -> STR .

    PLUS            reduce using rule 81 (str -> STR .)
    MINUS           reduce using rule 81 (str -> STR .)
    MULT            reduce using rule 81 (str -> STR .)
    DIV             reduce using rule 81 (str -> STR .)
    MOD             reduce using rule 81 (str -> STR .)
    EQUAL           reduce using rule 81 (str -> STR .)
    DIFF            reduce using rule 81 (str -> STR .)
    LESSEQ          reduce using rule 81 (str -> STR .)
    GREATEQ         reduce using rule 81 (str -> STR .)
    GREATER         reduce using rule 81 (str -> STR .)
    LESS            reduce using rule 81 (str -> STR .)
    AND             reduce using rule 81 (str -> STR .)
    OR              reduce using rule 81 (str -> STR .)
    QMARK           reduce using rule 81 (str -> STR .)
    SCOLON          reduce using rule 81 (str -> STR .)
    RPAREN          reduce using rule 81 (str -> STR .)
    COMMA           reduce using rule 81 (str -> STR .)
    RBRAC           reduce using rule 81 (str -> STR .)
    COLON           reduce using rule 81 (str -> STR .)
    RCBRAC          reduce using rule 81 (str -> STR .)


state 38

    (11) varSpec -> ID ATTR literal .

    COMMA           reduce using rule 11 (varSpec -> ID ATTR literal .)
    SCOLON          reduce using rule 11 (varSpec -> ID ATTR literal .)


state 39

    (77) literal -> num .

    COMMA           reduce using rule 77 (literal -> num .)
    RCBRAC          reduce using rule 77 (literal -> num .)
    PLUS            reduce using rule 77 (literal -> num .)
    MINUS           reduce using rule 77 (literal -> num .)
    MULT            reduce using rule 77 (literal -> num .)
    DIV             reduce using rule 77 (literal -> num .)
    MOD             reduce using rule 77 (literal -> num .)
    EQUAL           reduce using rule 77 (literal -> num .)
    DIFF            reduce using rule 77 (literal -> num .)
    LESSEQ          reduce using rule 77 (literal -> num .)
    GREATEQ         reduce using rule 77 (literal -> num .)
    GREATER         reduce using rule 77 (literal -> num .)
    LESS            reduce using rule 77 (literal -> num .)
    AND             reduce using rule 77 (literal -> num .)
    OR              reduce using rule 77 (literal -> num .)
    QMARK           reduce using rule 77 (literal -> num .)
    SCOLON          reduce using rule 77 (literal -> num .)
    RPAREN          reduce using rule 77 (literal -> num .)
    RBRAC           reduce using rule 77 (literal -> num .)
    COLON           reduce using rule 77 (literal -> num .)


state 40

    (78) literal -> str .

    COMMA           reduce using rule 78 (literal -> str .)
    RCBRAC          reduce using rule 78 (literal -> str .)
    PLUS            reduce using rule 78 (literal -> str .)
    MINUS           reduce using rule 78 (literal -> str .)
    MULT            reduce using rule 78 (literal -> str .)
    DIV             reduce using rule 78 (literal -> str .)
    MOD             reduce using rule 78 (literal -> str .)
    EQUAL           reduce using rule 78 (literal -> str .)
    DIFF            reduce using rule 78 (literal -> str .)
    LESSEQ          reduce using rule 78 (literal -> str .)
    GREATEQ         reduce using rule 78 (literal -> str .)
    GREATER         reduce using rule 78 (literal -> str .)
    LESS            reduce using rule 78 (literal -> str .)
    AND             reduce using rule 78 (literal -> str .)
    OR              reduce using rule 78 (literal -> str .)
    QMARK           reduce using rule 78 (literal -> str .)
    SCOLON          reduce using rule 78 (literal -> str .)
    RPAREN          reduce using rule 78 (literal -> str .)
    RBRAC           reduce using rule 78 (literal -> str .)
    COLON           reduce using rule 78 (literal -> str .)


state 41

    (79) literal -> logic .

    COMMA           reduce using rule 79 (literal -> logic .)
    RCBRAC          reduce using rule 79 (literal -> logic .)
    PLUS            reduce using rule 79 (literal -> logic .)
    MINUS           reduce using rule 79 (literal -> logic .)
    MULT            reduce using rule 79 (literal -> logic .)
    DIV             reduce using rule 79 (literal -> logic .)
    MOD             reduce using rule 79 (literal -> logic .)
    EQUAL           reduce using rule 79 (literal -> logic .)
    DIFF            reduce using rule 79 (literal -> logic .)
    LESSEQ          reduce using rule 79 (literal -> logic .)
    GREATEQ         reduce using rule 79 (literal -> logic .)
    GREATER         reduce using rule 79 (literal -> logic .)
    LESS            reduce using rule 79 (literal -> logic .)
    AND             reduce using rule 79 (literal -> logic .)
    OR              reduce using rule 79 (literal -> logic .)
    QMARK           reduce using rule 79 (literal -> logic .)
    SCOLON          reduce using rule 79 (literal -> logic .)
    RPAREN          reduce using rule 79 (literal -> logic .)
    RBRAC           reduce using rule 79 (literal -> logic .)
    COLON           reduce using rule 79 (literal -> logic .)


state 42

    (82) logic -> TRUE .

    PLUS            reduce using rule 82 (logic -> TRUE .)
    MINUS           reduce using rule 82 (logic -> TRUE .)
    MULT            reduce using rule 82 (logic -> TRUE .)
    DIV             reduce using rule 82 (logic -> TRUE .)
    MOD             reduce using rule 82 (logic -> TRUE .)
    EQUAL           reduce using rule 82 (logic -> TRUE .)
    DIFF            reduce using rule 82 (logic -> TRUE .)
    LESSEQ          reduce using rule 82 (logic -> TRUE .)
    GREATEQ         reduce using rule 82 (logic -> TRUE .)
    GREATER         reduce using rule 82 (logic -> TRUE .)
    LESS            reduce using rule 82 (logic -> TRUE .)
    AND             reduce using rule 82 (logic -> TRUE .)
    OR              reduce using rule 82 (logic -> TRUE .)
    QMARK           reduce using rule 82 (logic -> TRUE .)
    SCOLON          reduce using rule 82 (logic -> TRUE .)
    COMMA           reduce using rule 82 (logic -> TRUE .)
    RPAREN          reduce using rule 82 (logic -> TRUE .)
    RBRAC           reduce using rule 82 (logic -> TRUE .)
    COLON           reduce using rule 82 (logic -> TRUE .)
    RCBRAC          reduce using rule 82 (logic -> TRUE .)


state 43

    (8) decProc -> ID LPAREN paramList RPAREN LCBRAC . block RCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    block                          shift and go to state 52
    type                           shift and go to state 51
    empty                          shift and go to state 50
    varDecList                     shift and go to state 53

state 44

    (89) paramSeq -> param COMMA paramSeq .

    RPAREN          reduce using rule 89 (paramSeq -> param COMMA paramSeq .)


state 45

    (21) param -> type ID LBRAC . RBRAC

    RBRAC           shift and go to state 54


state 46

    (12) varSpec -> ID LBRAC num RBRAC .
    (13) varSpec -> ID LBRAC num RBRAC . ATTR LCBRAC literalSeq RCBRAC

    COMMA           reduce using rule 12 (varSpec -> ID LBRAC num RBRAC .)
    SCOLON          reduce using rule 12 (varSpec -> ID LBRAC num RBRAC .)
    ATTR            shift and go to state 55


state 47

    (5) decFunc -> type ID LPAREN paramList RPAREN . LCBRAC block RCBRAC
    (7) decFunc -> type ID LPAREN paramList RPAREN . LCBRAC error RCBRAC

    LCBRAC          shift and go to state 56


state 48

    (6) decFunc -> type ID LPAREN error RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 57


state 49

    (23) varDecList -> varDec . varDecList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    LCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    type                           shift and go to state 51
    empty                          shift and go to state 50
    varDecList                     shift and go to state 58

state 50

    (24) varDecList -> empty .

    IF              reduce using rule 24 (varDecList -> empty .)
    WHILE           reduce using rule 24 (varDecList -> empty .)
    FOR             reduce using rule 24 (varDecList -> empty .)
    BREAK           reduce using rule 24 (varDecList -> empty .)
    RETURN          reduce using rule 24 (varDecList -> empty .)
    READ            reduce using rule 24 (varDecList -> empty .)
    WRITE           reduce using rule 24 (varDecList -> empty .)
    ID              reduce using rule 24 (varDecList -> empty .)
    RCBRAC          reduce using rule 24 (varDecList -> empty .)
    LCBRAC          reduce using rule 24 (varDecList -> empty .)


state 51

    (9) varDec -> type . varSpecSeq SCOLON
    (14) varSpecSeq -> . varSpec COMMA varSpecSeq
    (15) varSpecSeq -> . varSpec
    (10) varSpec -> . ID
    (11) varSpec -> . ID ATTR literal
    (12) varSpec -> . ID LBRAC num RBRAC
    (13) varSpec -> . ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    ID              shift and go to state 31

    varSpec                        shift and go to state 14
    varSpecSeq                     shift and go to state 15

state 52

    (8) decProc -> ID LPAREN paramList RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 59


state 53

    (22) block -> varDecList . stmtList
    (75) stmtList -> . stmt stmtList
    (76) stmtList -> . empty
    (46) stmt -> . ifStmt
    (47) stmt -> . whileStmt
    (48) stmt -> . forStmt
    (49) stmt -> . breakStmt
    (50) stmt -> . returnStmt
    (51) stmt -> . readStmt
    (52) stmt -> . writeStmt
    (53) stmt -> . assign SCOLON
    (54) stmt -> . subCall SCOLON
    (91) empty -> .
    (55) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC
    (56) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (57) whileStmt -> . WHILE LPAREN exp RPAREN LCBRAC block RCBRAC
    (58) forStmt -> . FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (59) breakStmt -> . BREAK SCOLON
    (60) returnStmt -> . RETURN SCOLON
    (61) returnStmt -> . RETURN exp SCOLON
    (62) readStmt -> . READ var SCOLON
    (63) writeStmt -> . WRITE expList SCOLON
    (64) assign -> . var ATTR exp
    (65) assign -> . var AVALPLUS exp
    (66) assign -> . var AVALMINUS exp
    (67) assign -> . var AVALMULT exp
    (68) assign -> . var AVALDIV exp
    (69) assign -> . var AVALMOD exp
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC

    RCBRAC          reduce using rule 91 (empty -> .)
    LCBRAC          reduce using rule 91 (empty -> .)
    IF              shift and go to state 74
    WHILE           shift and go to state 63
    FOR             shift and go to state 68
    BREAK           shift and go to state 77
    RETURN          shift and go to state 60
    READ            shift and go to state 62
    WRITE           shift and go to state 71
    ID              shift and go to state 73

    writeStmt                      shift and go to state 75
    readStmt                       shift and go to state 64
    breakStmt                      shift and go to state 69
    subCall                        shift and go to state 61
    stmt                           shift and go to state 70
    assign                         shift and go to state 80
    whileStmt                      shift and go to state 65
    forStmt                        shift and go to state 78
    stmtList                       shift and go to state 79
    var                            shift and go to state 66
    returnStmt                     shift and go to state 72
    ifStmt                         shift and go to state 76
    empty                          shift and go to state 67

state 54

    (21) param -> type ID LBRAC RBRAC .

    COMMA           reduce using rule 21 (param -> type ID LBRAC RBRAC .)
    RPAREN          reduce using rule 21 (param -> type ID LBRAC RBRAC .)


state 55

    (13) varSpec -> ID LBRAC num RBRAC ATTR . LCBRAC literalSeq RCBRAC

    LCBRAC          shift and go to state 81


state 56

    (5) decFunc -> type ID LPAREN paramList RPAREN LCBRAC . block RCBRAC
    (7) decFunc -> type ID LPAREN paramList RPAREN LCBRAC . error RCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    error           shift and go to state 82
    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    empty                          shift and go to state 50
    type                           shift and go to state 51
    block                          shift and go to state 83
    varDecList                     shift and go to state 53

state 57

    (6) decFunc -> type ID LPAREN error RPAREN LCBRAC . block RCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    block                          shift and go to state 84
    type                           shift and go to state 51
    empty                          shift and go to state 50
    varDecList                     shift and go to state 53

state 58

    (23) varDecList -> varDec varDecList .

    IF              reduce using rule 23 (varDecList -> varDec varDecList .)
    WHILE           reduce using rule 23 (varDecList -> varDec varDecList .)
    FOR             reduce using rule 23 (varDecList -> varDec varDecList .)
    BREAK           reduce using rule 23 (varDecList -> varDec varDecList .)
    RETURN          reduce using rule 23 (varDecList -> varDec varDecList .)
    READ            reduce using rule 23 (varDecList -> varDec varDecList .)
    WRITE           reduce using rule 23 (varDecList -> varDec varDecList .)
    ID              reduce using rule 23 (varDecList -> varDec varDecList .)
    RCBRAC          reduce using rule 23 (varDecList -> varDec varDecList .)
    LCBRAC          reduce using rule 23 (varDecList -> varDec varDecList .)


state 59

    (8) decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .

    ID              reduce using rule 8 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    INT             reduce using rule 8 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    STRING          reduce using rule 8 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    BOOL            reduce using rule 8 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    $end            reduce using rule 8 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)


state 60

    (60) returnStmt -> RETURN . SCOLON
    (61) returnStmt -> RETURN . exp SCOLON
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    SCOLON          shift and go to state 86
    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 90
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 61

    (54) stmt -> subCall . SCOLON

    SCOLON          shift and go to state 92


state 62

    (62) readStmt -> READ . var SCOLON
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC

    ID              shift and go to state 94

    var                            shift and go to state 93

state 63

    (57) whileStmt -> WHILE . LPAREN exp RPAREN LCBRAC block RCBRAC

    LPAREN          shift and go to state 95


state 64

    (51) stmt -> readStmt .

    IF              reduce using rule 51 (stmt -> readStmt .)
    WHILE           reduce using rule 51 (stmt -> readStmt .)
    FOR             reduce using rule 51 (stmt -> readStmt .)
    BREAK           reduce using rule 51 (stmt -> readStmt .)
    RETURN          reduce using rule 51 (stmt -> readStmt .)
    READ            reduce using rule 51 (stmt -> readStmt .)
    WRITE           reduce using rule 51 (stmt -> readStmt .)
    ID              reduce using rule 51 (stmt -> readStmt .)
    RCBRAC          reduce using rule 51 (stmt -> readStmt .)
    LCBRAC          reduce using rule 51 (stmt -> readStmt .)


state 65

    (47) stmt -> whileStmt .

    IF              reduce using rule 47 (stmt -> whileStmt .)
    WHILE           reduce using rule 47 (stmt -> whileStmt .)
    FOR             reduce using rule 47 (stmt -> whileStmt .)
    BREAK           reduce using rule 47 (stmt -> whileStmt .)
    RETURN          reduce using rule 47 (stmt -> whileStmt .)
    READ            reduce using rule 47 (stmt -> whileStmt .)
    WRITE           reduce using rule 47 (stmt -> whileStmt .)
    ID              reduce using rule 47 (stmt -> whileStmt .)
    RCBRAC          reduce using rule 47 (stmt -> whileStmt .)
    LCBRAC          reduce using rule 47 (stmt -> whileStmt .)


state 66

    (64) assign -> var . ATTR exp
    (65) assign -> var . AVALPLUS exp
    (66) assign -> var . AVALMINUS exp
    (67) assign -> var . AVALMULT exp
    (68) assign -> var . AVALDIV exp
    (69) assign -> var . AVALMOD exp

    ATTR            shift and go to state 98
    AVALPLUS        shift and go to state 99
    AVALMINUS       shift and go to state 97
    AVALMULT        shift and go to state 100
    AVALDIV         shift and go to state 96
    AVALMOD         shift and go to state 101


state 67

    (76) stmtList -> empty .

    RCBRAC          reduce using rule 76 (stmtList -> empty .)
    LCBRAC          reduce using rule 76 (stmtList -> empty .)


state 68

    (58) forStmt -> FOR . LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC

    LPAREN          shift and go to state 102


state 69

    (49) stmt -> breakStmt .

    IF              reduce using rule 49 (stmt -> breakStmt .)
    WHILE           reduce using rule 49 (stmt -> breakStmt .)
    FOR             reduce using rule 49 (stmt -> breakStmt .)
    BREAK           reduce using rule 49 (stmt -> breakStmt .)
    RETURN          reduce using rule 49 (stmt -> breakStmt .)
    READ            reduce using rule 49 (stmt -> breakStmt .)
    WRITE           reduce using rule 49 (stmt -> breakStmt .)
    ID              reduce using rule 49 (stmt -> breakStmt .)
    RCBRAC          reduce using rule 49 (stmt -> breakStmt .)
    LCBRAC          reduce using rule 49 (stmt -> breakStmt .)


state 70

    (75) stmtList -> stmt . stmtList
    (75) stmtList -> . stmt stmtList
    (76) stmtList -> . empty
    (46) stmt -> . ifStmt
    (47) stmt -> . whileStmt
    (48) stmt -> . forStmt
    (49) stmt -> . breakStmt
    (50) stmt -> . returnStmt
    (51) stmt -> . readStmt
    (52) stmt -> . writeStmt
    (53) stmt -> . assign SCOLON
    (54) stmt -> . subCall SCOLON
    (91) empty -> .
    (55) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC
    (56) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (57) whileStmt -> . WHILE LPAREN exp RPAREN LCBRAC block RCBRAC
    (58) forStmt -> . FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (59) breakStmt -> . BREAK SCOLON
    (60) returnStmt -> . RETURN SCOLON
    (61) returnStmt -> . RETURN exp SCOLON
    (62) readStmt -> . READ var SCOLON
    (63) writeStmt -> . WRITE expList SCOLON
    (64) assign -> . var ATTR exp
    (65) assign -> . var AVALPLUS exp
    (66) assign -> . var AVALMINUS exp
    (67) assign -> . var AVALMULT exp
    (68) assign -> . var AVALDIV exp
    (69) assign -> . var AVALMOD exp
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC

    RCBRAC          reduce using rule 91 (empty -> .)
    LCBRAC          reduce using rule 91 (empty -> .)
    IF              shift and go to state 74
    WHILE           shift and go to state 63
    FOR             shift and go to state 68
    BREAK           shift and go to state 77
    RETURN          shift and go to state 60
    READ            shift and go to state 62
    WRITE           shift and go to state 71
    ID              shift and go to state 73

    writeStmt                      shift and go to state 75
    readStmt                       shift and go to state 64
    breakStmt                      shift and go to state 69
    stmt                           shift and go to state 70
    assign                         shift and go to state 80
    whileStmt                      shift and go to state 65
    forStmt                        shift and go to state 78
    stmtList                       shift and go to state 103
    var                            shift and go to state 66
    returnStmt                     shift and go to state 72
    ifStmt                         shift and go to state 76
    empty                          shift and go to state 67
    subCall                        shift and go to state 61

state 71

    (63) writeStmt -> WRITE . expList SCOLON
    (71) expList -> . expSeq
    (72) expList -> . empty
    (73) expSeq -> . exp COMMA expSeq
    (74) expSeq -> . exp
    (91) empty -> .
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    SCOLON          reduce using rule 91 (empty -> .)
    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    expSeq                         shift and go to state 104
    str                            shift and go to state 40
    exp                            shift and go to state 107
    logic                          shift and go to state 41
    var                            shift and go to state 88
    expList                        shift and go to state 105
    empty                          shift and go to state 106

state 72

    (50) stmt -> returnStmt .

    IF              reduce using rule 50 (stmt -> returnStmt .)
    WHILE           reduce using rule 50 (stmt -> returnStmt .)
    FOR             reduce using rule 50 (stmt -> returnStmt .)
    BREAK           reduce using rule 50 (stmt -> returnStmt .)
    RETURN          reduce using rule 50 (stmt -> returnStmt .)
    READ            reduce using rule 50 (stmt -> returnStmt .)
    WRITE           reduce using rule 50 (stmt -> returnStmt .)
    ID              reduce using rule 50 (stmt -> returnStmt .)
    RCBRAC          reduce using rule 50 (stmt -> returnStmt .)
    LCBRAC          reduce using rule 50 (stmt -> returnStmt .)


state 73

    (70) subCall -> ID . LBRAC expList RBRAC
    (25) var -> ID .
    (26) var -> ID . LBRAC exp RBRAC

    LBRAC           shift and go to state 108
    COLON           reduce using rule 25 (var -> ID .)
    PLUS            reduce using rule 25 (var -> ID .)
    MINUS           reduce using rule 25 (var -> ID .)
    MULT            reduce using rule 25 (var -> ID .)
    DIV             reduce using rule 25 (var -> ID .)
    MOD             reduce using rule 25 (var -> ID .)
    EQUAL           reduce using rule 25 (var -> ID .)
    DIFF            reduce using rule 25 (var -> ID .)
    LESSEQ          reduce using rule 25 (var -> ID .)
    GREATEQ         reduce using rule 25 (var -> ID .)
    GREATER         reduce using rule 25 (var -> ID .)
    LESS            reduce using rule 25 (var -> ID .)
    AND             reduce using rule 25 (var -> ID .)
    OR              reduce using rule 25 (var -> ID .)
    QMARK           reduce using rule 25 (var -> ID .)
    SCOLON          reduce using rule 25 (var -> ID .)
    RPAREN          reduce using rule 25 (var -> ID .)
    COMMA           reduce using rule 25 (var -> ID .)
    RBRAC           reduce using rule 25 (var -> ID .)
    ATTR            reduce using rule 25 (var -> ID .)
    AVALPLUS        reduce using rule 25 (var -> ID .)
    AVALMINUS       reduce using rule 25 (var -> ID .)
    AVALMULT        reduce using rule 25 (var -> ID .)
    AVALDIV         reduce using rule 25 (var -> ID .)
    AVALMOD         reduce using rule 25 (var -> ID .)


state 74

    (55) ifStmt -> IF . LPAREN exp RPAREN LCBRAC block RCBRAC
    (56) ifStmt -> IF . LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC

    LPAREN          shift and go to state 109


state 75

    (52) stmt -> writeStmt .

    IF              reduce using rule 52 (stmt -> writeStmt .)
    WHILE           reduce using rule 52 (stmt -> writeStmt .)
    FOR             reduce using rule 52 (stmt -> writeStmt .)
    BREAK           reduce using rule 52 (stmt -> writeStmt .)
    RETURN          reduce using rule 52 (stmt -> writeStmt .)
    READ            reduce using rule 52 (stmt -> writeStmt .)
    WRITE           reduce using rule 52 (stmt -> writeStmt .)
    ID              reduce using rule 52 (stmt -> writeStmt .)
    RCBRAC          reduce using rule 52 (stmt -> writeStmt .)
    LCBRAC          reduce using rule 52 (stmt -> writeStmt .)


state 76

    (46) stmt -> ifStmt .

    IF              reduce using rule 46 (stmt -> ifStmt .)
    WHILE           reduce using rule 46 (stmt -> ifStmt .)
    FOR             reduce using rule 46 (stmt -> ifStmt .)
    BREAK           reduce using rule 46 (stmt -> ifStmt .)
    RETURN          reduce using rule 46 (stmt -> ifStmt .)
    READ            reduce using rule 46 (stmt -> ifStmt .)
    WRITE           reduce using rule 46 (stmt -> ifStmt .)
    ID              reduce using rule 46 (stmt -> ifStmt .)
    RCBRAC          reduce using rule 46 (stmt -> ifStmt .)
    LCBRAC          reduce using rule 46 (stmt -> ifStmt .)


state 77

    (59) breakStmt -> BREAK . SCOLON

    SCOLON          shift and go to state 110


state 78

    (48) stmt -> forStmt .

    IF              reduce using rule 48 (stmt -> forStmt .)
    WHILE           reduce using rule 48 (stmt -> forStmt .)
    FOR             reduce using rule 48 (stmt -> forStmt .)
    BREAK           reduce using rule 48 (stmt -> forStmt .)
    RETURN          reduce using rule 48 (stmt -> forStmt .)
    READ            reduce using rule 48 (stmt -> forStmt .)
    WRITE           reduce using rule 48 (stmt -> forStmt .)
    ID              reduce using rule 48 (stmt -> forStmt .)
    RCBRAC          reduce using rule 48 (stmt -> forStmt .)
    LCBRAC          reduce using rule 48 (stmt -> forStmt .)


state 79

    (22) block -> varDecList stmtList .

    LCBRAC          reduce using rule 22 (block -> varDecList stmtList .)
    RCBRAC          reduce using rule 22 (block -> varDecList stmtList .)


state 80

    (53) stmt -> assign . SCOLON

    SCOLON          shift and go to state 111


state 81

    (13) varSpec -> ID LBRAC num RBRAC ATTR LCBRAC . literalSeq RCBRAC
    (16) literalSeq -> . literal COMMA literalSeq
    (17) literalSeq -> . literal
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    literalSeq                     shift and go to state 113
    literal                        shift and go to state 112
    num                            shift and go to state 39
    str                            shift and go to state 40
    logic                          shift and go to state 41

state 82

    (7) decFunc -> type ID LPAREN paramList RPAREN LCBRAC error . RCBRAC

    RCBRAC          shift and go to state 114


state 83

    (5) decFunc -> type ID LPAREN paramList RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 115


state 84

    (6) decFunc -> type ID LPAREN error RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 116


state 85

    (42) exp -> subCall .

    COLON           reduce using rule 42 (exp -> subCall .)
    PLUS            reduce using rule 42 (exp -> subCall .)
    MINUS           reduce using rule 42 (exp -> subCall .)
    MULT            reduce using rule 42 (exp -> subCall .)
    DIV             reduce using rule 42 (exp -> subCall .)
    MOD             reduce using rule 42 (exp -> subCall .)
    EQUAL           reduce using rule 42 (exp -> subCall .)
    DIFF            reduce using rule 42 (exp -> subCall .)
    LESSEQ          reduce using rule 42 (exp -> subCall .)
    GREATEQ         reduce using rule 42 (exp -> subCall .)
    GREATER         reduce using rule 42 (exp -> subCall .)
    LESS            reduce using rule 42 (exp -> subCall .)
    AND             reduce using rule 42 (exp -> subCall .)
    OR              reduce using rule 42 (exp -> subCall .)
    QMARK           reduce using rule 42 (exp -> subCall .)
    SCOLON          reduce using rule 42 (exp -> subCall .)
    RPAREN          reduce using rule 42 (exp -> subCall .)
    COMMA           reduce using rule 42 (exp -> subCall .)
    RBRAC           reduce using rule 42 (exp -> subCall .)


state 86

    (60) returnStmt -> RETURN SCOLON .

    IF              reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    WHILE           reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    FOR             reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    BREAK           reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    RETURN          reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    READ            reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    WRITE           reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    ID              reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    RCBRAC          reduce using rule 60 (returnStmt -> RETURN SCOLON .)
    LCBRAC          reduce using rule 60 (returnStmt -> RETURN SCOLON .)


state 87

    (44) exp -> literal .

    COLON           reduce using rule 44 (exp -> literal .)
    PLUS            reduce using rule 44 (exp -> literal .)
    MINUS           reduce using rule 44 (exp -> literal .)
    MULT            reduce using rule 44 (exp -> literal .)
    DIV             reduce using rule 44 (exp -> literal .)
    MOD             reduce using rule 44 (exp -> literal .)
    EQUAL           reduce using rule 44 (exp -> literal .)
    DIFF            reduce using rule 44 (exp -> literal .)
    LESSEQ          reduce using rule 44 (exp -> literal .)
    GREATEQ         reduce using rule 44 (exp -> literal .)
    GREATER         reduce using rule 44 (exp -> literal .)
    LESS            reduce using rule 44 (exp -> literal .)
    AND             reduce using rule 44 (exp -> literal .)
    OR              reduce using rule 44 (exp -> literal .)
    QMARK           reduce using rule 44 (exp -> literal .)
    SCOLON          reduce using rule 44 (exp -> literal .)
    RPAREN          reduce using rule 44 (exp -> literal .)
    COMMA           reduce using rule 44 (exp -> literal .)
    RBRAC           reduce using rule 44 (exp -> literal .)


state 88

    (43) exp -> var .

    COLON           reduce using rule 43 (exp -> var .)
    PLUS            reduce using rule 43 (exp -> var .)
    MINUS           reduce using rule 43 (exp -> var .)
    MULT            reduce using rule 43 (exp -> var .)
    DIV             reduce using rule 43 (exp -> var .)
    MOD             reduce using rule 43 (exp -> var .)
    EQUAL           reduce using rule 43 (exp -> var .)
    DIFF            reduce using rule 43 (exp -> var .)
    LESSEQ          reduce using rule 43 (exp -> var .)
    GREATEQ         reduce using rule 43 (exp -> var .)
    GREATER         reduce using rule 43 (exp -> var .)
    LESS            reduce using rule 43 (exp -> var .)
    AND             reduce using rule 43 (exp -> var .)
    OR              reduce using rule 43 (exp -> var .)
    QMARK           reduce using rule 43 (exp -> var .)
    SCOLON          reduce using rule 43 (exp -> var .)
    RPAREN          reduce using rule 43 (exp -> var .)
    COMMA           reduce using rule 43 (exp -> var .)
    RBRAC           reduce using rule 43 (exp -> var .)


state 89

    (45) exp -> LPAREN . exp RPAREN
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 117
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 90

    (61) returnStmt -> RETURN exp . SCOLON
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          shift and go to state 124
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 91

    (40) exp -> NOT . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 133
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 92

    (54) stmt -> subCall SCOLON .

    IF              reduce using rule 54 (stmt -> subCall SCOLON .)
    WHILE           reduce using rule 54 (stmt -> subCall SCOLON .)
    FOR             reduce using rule 54 (stmt -> subCall SCOLON .)
    BREAK           reduce using rule 54 (stmt -> subCall SCOLON .)
    RETURN          reduce using rule 54 (stmt -> subCall SCOLON .)
    READ            reduce using rule 54 (stmt -> subCall SCOLON .)
    WRITE           reduce using rule 54 (stmt -> subCall SCOLON .)
    ID              reduce using rule 54 (stmt -> subCall SCOLON .)
    RCBRAC          reduce using rule 54 (stmt -> subCall SCOLON .)
    LCBRAC          reduce using rule 54 (stmt -> subCall SCOLON .)


state 93

    (62) readStmt -> READ var . SCOLON

    SCOLON          shift and go to state 134


state 94

    (25) var -> ID .
    (26) var -> ID . LBRAC exp RBRAC

    SCOLON          reduce using rule 25 (var -> ID .)
    ATTR            reduce using rule 25 (var -> ID .)
    AVALPLUS        reduce using rule 25 (var -> ID .)
    AVALMINUS       reduce using rule 25 (var -> ID .)
    AVALMULT        reduce using rule 25 (var -> ID .)
    AVALDIV         reduce using rule 25 (var -> ID .)
    AVALMOD         reduce using rule 25 (var -> ID .)
    LBRAC           shift and go to state 135


state 95

    (57) whileStmt -> WHILE LPAREN . exp RPAREN LCBRAC block RCBRAC
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 136
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 96

    (68) assign -> var AVALDIV . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 137
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 97

    (66) assign -> var AVALMINUS . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 138
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 98

    (64) assign -> var ATTR . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 139
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 99

    (65) assign -> var AVALPLUS . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 140
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 100

    (67) assign -> var AVALMULT . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 141
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 101

    (69) assign -> var AVALMOD . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 142
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 102

    (58) forStmt -> FOR LPAREN . assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (64) assign -> . var ATTR exp
    (65) assign -> . var AVALPLUS exp
    (66) assign -> . var AVALMINUS exp
    (67) assign -> . var AVALMULT exp
    (68) assign -> . var AVALDIV exp
    (69) assign -> . var AVALMOD exp
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC

    ID              shift and go to state 94

    var                            shift and go to state 66
    assign                         shift and go to state 143

state 103

    (75) stmtList -> stmt stmtList .

    RCBRAC          reduce using rule 75 (stmtList -> stmt stmtList .)
    LCBRAC          reduce using rule 75 (stmtList -> stmt stmtList .)


state 104

    (71) expList -> expSeq .

    SCOLON          reduce using rule 71 (expList -> expSeq .)
    RBRAC           reduce using rule 71 (expList -> expSeq .)


state 105

    (63) writeStmt -> WRITE expList . SCOLON

    SCOLON          shift and go to state 144


state 106

    (72) expList -> empty .

    SCOLON          reduce using rule 72 (expList -> empty .)
    RBRAC           reduce using rule 72 (expList -> empty .)


state 107

    (73) expSeq -> exp . COMMA expSeq
    (74) expSeq -> exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    COMMA           shift and go to state 145
    SCOLON          reduce using rule 74 (expSeq -> exp .)
    RBRAC           reduce using rule 74 (expSeq -> exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 108

    (70) subCall -> ID LBRAC . expList RBRAC
    (26) var -> ID LBRAC . exp RBRAC
    (71) expList -> . expSeq
    (72) expList -> . empty
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (73) expSeq -> . exp COMMA expSeq
    (74) expSeq -> . exp
    (91) empty -> .
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    RBRAC           reduce using rule 91 (empty -> .)
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    expSeq                         shift and go to state 104
    str                            shift and go to state 40
    exp                            shift and go to state 147
    logic                          shift and go to state 41
    var                            shift and go to state 88
    expList                        shift and go to state 146
    empty                          shift and go to state 106

state 109

    (55) ifStmt -> IF LPAREN . exp RPAREN LCBRAC block RCBRAC
    (56) ifStmt -> IF LPAREN . exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 148
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 110

    (59) breakStmt -> BREAK SCOLON .

    IF              reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    WHILE           reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    FOR             reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    BREAK           reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    RETURN          reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    READ            reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    WRITE           reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    ID              reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    RCBRAC          reduce using rule 59 (breakStmt -> BREAK SCOLON .)
    LCBRAC          reduce using rule 59 (breakStmt -> BREAK SCOLON .)


state 111

    (53) stmt -> assign SCOLON .

    IF              reduce using rule 53 (stmt -> assign SCOLON .)
    WHILE           reduce using rule 53 (stmt -> assign SCOLON .)
    FOR             reduce using rule 53 (stmt -> assign SCOLON .)
    BREAK           reduce using rule 53 (stmt -> assign SCOLON .)
    RETURN          reduce using rule 53 (stmt -> assign SCOLON .)
    READ            reduce using rule 53 (stmt -> assign SCOLON .)
    WRITE           reduce using rule 53 (stmt -> assign SCOLON .)
    ID              reduce using rule 53 (stmt -> assign SCOLON .)
    RCBRAC          reduce using rule 53 (stmt -> assign SCOLON .)
    LCBRAC          reduce using rule 53 (stmt -> assign SCOLON .)


state 112

    (16) literalSeq -> literal . COMMA literalSeq
    (17) literalSeq -> literal .

    COMMA           shift and go to state 149
    RCBRAC          reduce using rule 17 (literalSeq -> literal .)


state 113

    (13) varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq . RCBRAC

    RCBRAC          shift and go to state 150


state 114

    (7) decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC .

    ID              reduce using rule 7 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC .)
    INT             reduce using rule 7 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC .)
    STRING          reduce using rule 7 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC .)
    BOOL            reduce using rule 7 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC .)
    $end            reduce using rule 7 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC error RCBRAC .)


state 115

    (5) decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .

    ID              reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    INT             reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    STRING          reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    BOOL            reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    $end            reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)


state 116

    (6) decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC .

    ID              reduce using rule 6 (decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC .)
    INT             reduce using rule 6 (decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC .)
    STRING          reduce using rule 6 (decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC .)
    BOOL            reduce using rule 6 (decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC .)
    $end            reduce using rule 6 (decFunc -> type ID LPAREN error RPAREN LCBRAC block RCBRAC .)


state 117

    (45) exp -> LPAREN exp . RPAREN
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    RPAREN          shift and go to state 151
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 118

    (38) exp -> exp AND . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 152
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 119

    (36) exp -> exp GREATER . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 153
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 120

    (35) exp -> exp GREATEQ . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 154
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 121

    (37) exp -> exp LESS . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 155
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 122

    (41) exp -> exp QMARK . exp COLON exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 156
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 123

    (32) exp -> exp EQUAL . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 157
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 124

    (61) returnStmt -> RETURN exp SCOLON .

    IF              reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    WHILE           reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    FOR             reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    BREAK           reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    RETURN          reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    READ            reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    WRITE           reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    ID              reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    RCBRAC          reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)
    LCBRAC          reduce using rule 61 (returnStmt -> RETURN exp SCOLON .)


state 125

    (39) exp -> exp OR . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 158
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 126

    (34) exp -> exp LESSEQ . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 159
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 127

    (27) exp -> exp PLUS . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 160
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 128

    (33) exp -> exp DIFF . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 161
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 129

    (30) exp -> exp DIV . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 162
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 130

    (28) exp -> exp MINUS . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 163
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 131

    (29) exp -> exp MULT . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 164
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 132

    (31) exp -> exp MOD . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 165
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 133

    (40) exp -> NOT exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 40 (exp -> NOT exp .)
    SCOLON          reduce using rule 40 (exp -> NOT exp .)
    RPAREN          reduce using rule 40 (exp -> NOT exp .)
    COMMA           reduce using rule 40 (exp -> NOT exp .)
    RBRAC           reduce using rule 40 (exp -> NOT exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 40 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 40 (exp -> NOT exp .) ]
  ! MULT            [ reduce using rule 40 (exp -> NOT exp .) ]
  ! DIV             [ reduce using rule 40 (exp -> NOT exp .) ]
  ! MOD             [ reduce using rule 40 (exp -> NOT exp .) ]
  ! EQUAL           [ reduce using rule 40 (exp -> NOT exp .) ]
  ! DIFF            [ reduce using rule 40 (exp -> NOT exp .) ]
  ! LESSEQ          [ reduce using rule 40 (exp -> NOT exp .) ]
  ! GREATEQ         [ reduce using rule 40 (exp -> NOT exp .) ]
  ! GREATER         [ reduce using rule 40 (exp -> NOT exp .) ]
  ! LESS            [ reduce using rule 40 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 40 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 40 (exp -> NOT exp .) ]
  ! QMARK           [ reduce using rule 40 (exp -> NOT exp .) ]


state 134

    (62) readStmt -> READ var SCOLON .

    IF              reduce using rule 62 (readStmt -> READ var SCOLON .)
    WHILE           reduce using rule 62 (readStmt -> READ var SCOLON .)
    FOR             reduce using rule 62 (readStmt -> READ var SCOLON .)
    BREAK           reduce using rule 62 (readStmt -> READ var SCOLON .)
    RETURN          reduce using rule 62 (readStmt -> READ var SCOLON .)
    READ            reduce using rule 62 (readStmt -> READ var SCOLON .)
    WRITE           reduce using rule 62 (readStmt -> READ var SCOLON .)
    ID              reduce using rule 62 (readStmt -> READ var SCOLON .)
    RCBRAC          reduce using rule 62 (readStmt -> READ var SCOLON .)
    LCBRAC          reduce using rule 62 (readStmt -> READ var SCOLON .)


state 135

    (26) var -> ID LBRAC . exp RBRAC
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 166
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 136

    (57) whileStmt -> WHILE LPAREN exp . RPAREN LCBRAC block RCBRAC
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    RPAREN          shift and go to state 167
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 137

    (68) assign -> var AVALDIV exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 68 (assign -> var AVALDIV exp .)
    RPAREN          reduce using rule 68 (assign -> var AVALDIV exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 138

    (66) assign -> var AVALMINUS exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 66 (assign -> var AVALMINUS exp .)
    RPAREN          reduce using rule 66 (assign -> var AVALMINUS exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 139

    (64) assign -> var ATTR exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 64 (assign -> var ATTR exp .)
    RPAREN          reduce using rule 64 (assign -> var ATTR exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 140

    (65) assign -> var AVALPLUS exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 65 (assign -> var AVALPLUS exp .)
    RPAREN          reduce using rule 65 (assign -> var AVALPLUS exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 141

    (67) assign -> var AVALMULT exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 67 (assign -> var AVALMULT exp .)
    RPAREN          reduce using rule 67 (assign -> var AVALMULT exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 142

    (69) assign -> var AVALMOD exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 69 (assign -> var AVALMOD exp .)
    RPAREN          reduce using rule 69 (assign -> var AVALMOD exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 143

    (58) forStmt -> FOR LPAREN assign . SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC

    SCOLON          shift and go to state 168


state 144

    (63) writeStmt -> WRITE expList SCOLON .

    IF              reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    WHILE           reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    FOR             reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    BREAK           reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    RETURN          reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    READ            reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    WRITE           reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    ID              reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    RCBRAC          reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)
    LCBRAC          reduce using rule 63 (writeStmt -> WRITE expList SCOLON .)


state 145

    (73) expSeq -> exp COMMA . expSeq
    (73) expSeq -> . exp COMMA expSeq
    (74) expSeq -> . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    expSeq                         shift and go to state 169
    str                            shift and go to state 40
    exp                            shift and go to state 107
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 146

    (70) subCall -> ID LBRAC expList . RBRAC

    RBRAC           shift and go to state 170


state 147

    (26) var -> ID LBRAC exp . RBRAC
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp
    (73) expSeq -> exp . COMMA expSeq
    (74) expSeq -> exp .

  ! shift/reduce conflict for RBRAC resolved as shift
    RBRAC           shift and go to state 171
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122
    COMMA           shift and go to state 145

  ! RBRAC           [ reduce using rule 74 (expSeq -> exp .) ]


state 148

    (55) ifStmt -> IF LPAREN exp . RPAREN LCBRAC block RCBRAC
    (56) ifStmt -> IF LPAREN exp . RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    RPAREN          shift and go to state 172
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 149

    (16) literalSeq -> literal COMMA . literalSeq
    (16) literalSeq -> . literal COMMA literalSeq
    (17) literalSeq -> . literal
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    literalSeq                     shift and go to state 173
    literal                        shift and go to state 112
    num                            shift and go to state 39
    str                            shift and go to state 40
    logic                          shift and go to state 41

state 150

    (13) varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC .

    COMMA           reduce using rule 13 (varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC .)
    SCOLON          reduce using rule 13 (varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC .)


state 151

    (45) exp -> LPAREN exp RPAREN .

    COLON           reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    MULT            reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    LESSEQ          reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    GREATEQ         reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    LESS            reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    QMARK           reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    SCOLON          reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 45 (exp -> LPAREN exp RPAREN .)
    RBRAC           reduce using rule 45 (exp -> LPAREN exp RPAREN .)


state 152

    (38) exp -> exp AND exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 38 (exp -> exp AND exp .)
    SCOLON          reduce using rule 38 (exp -> exp AND exp .)
    RPAREN          reduce using rule 38 (exp -> exp AND exp .)
    COMMA           reduce using rule 38 (exp -> exp AND exp .)
    RBRAC           reduce using rule 38 (exp -> exp AND exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! MULT            [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! EQUAL           [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! DIFF            [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! LESSEQ          [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! GREATEQ         [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! GREATER         [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! LESS            [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 38 (exp -> exp AND exp .) ]
  ! QMARK           [ reduce using rule 38 (exp -> exp AND exp .) ]


state 153

    (36) exp -> exp GREATER exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 36 (exp -> exp GREATER exp .)
    SCOLON          reduce using rule 36 (exp -> exp GREATER exp .)
    RPAREN          reduce using rule 36 (exp -> exp GREATER exp .)
    COMMA           reduce using rule 36 (exp -> exp GREATER exp .)
    RBRAC           reduce using rule 36 (exp -> exp GREATER exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! MULT            [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! DIV             [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! MOD             [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! EQUAL           [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! DIFF            [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! LESSEQ          [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! GREATEQ         [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! GREATER         [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! LESS            [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! AND             [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! OR              [ reduce using rule 36 (exp -> exp GREATER exp .) ]
  ! QMARK           [ reduce using rule 36 (exp -> exp GREATER exp .) ]


state 154

    (35) exp -> exp GREATEQ exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 35 (exp -> exp GREATEQ exp .)
    SCOLON          reduce using rule 35 (exp -> exp GREATEQ exp .)
    RPAREN          reduce using rule 35 (exp -> exp GREATEQ exp .)
    COMMA           reduce using rule 35 (exp -> exp GREATEQ exp .)
    RBRAC           reduce using rule 35 (exp -> exp GREATEQ exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! MULT            [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! DIV             [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! MOD             [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! EQUAL           [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! DIFF            [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! LESSEQ          [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! GREATEQ         [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! GREATER         [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! LESS            [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! AND             [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! OR              [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]
  ! QMARK           [ reduce using rule 35 (exp -> exp GREATEQ exp .) ]


state 155

    (37) exp -> exp LESS exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 37 (exp -> exp LESS exp .)
    SCOLON          reduce using rule 37 (exp -> exp LESS exp .)
    RPAREN          reduce using rule 37 (exp -> exp LESS exp .)
    COMMA           reduce using rule 37 (exp -> exp LESS exp .)
    RBRAC           reduce using rule 37 (exp -> exp LESS exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! MINUS           [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! MULT            [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! DIV             [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! MOD             [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! EQUAL           [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! DIFF            [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! LESSEQ          [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! GREATEQ         [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! GREATER         [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! LESS            [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! AND             [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! OR              [ reduce using rule 37 (exp -> exp LESS exp .) ]
  ! QMARK           [ reduce using rule 37 (exp -> exp LESS exp .) ]


state 156

    (41) exp -> exp QMARK exp . COLON exp
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    COLON           shift and go to state 174
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 157

    (32) exp -> exp EQUAL exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 32 (exp -> exp EQUAL exp .)
    SCOLON          reduce using rule 32 (exp -> exp EQUAL exp .)
    RPAREN          reduce using rule 32 (exp -> exp EQUAL exp .)
    COMMA           reduce using rule 32 (exp -> exp EQUAL exp .)
    RBRAC           reduce using rule 32 (exp -> exp EQUAL exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! MULT            [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! DIV             [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! MOD             [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! EQUAL           [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! DIFF            [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! LESSEQ          [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! GREATEQ         [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! GREATER         [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! LESS            [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! AND             [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! OR              [ reduce using rule 32 (exp -> exp EQUAL exp .) ]
  ! QMARK           [ reduce using rule 32 (exp -> exp EQUAL exp .) ]


state 158

    (39) exp -> exp OR exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 39 (exp -> exp OR exp .)
    SCOLON          reduce using rule 39 (exp -> exp OR exp .)
    RPAREN          reduce using rule 39 (exp -> exp OR exp .)
    COMMA           reduce using rule 39 (exp -> exp OR exp .)
    RBRAC           reduce using rule 39 (exp -> exp OR exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! MULT            [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! EQUAL           [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! DIFF            [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! LESSEQ          [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! GREATEQ         [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! GREATER         [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! LESS            [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 39 (exp -> exp OR exp .) ]
  ! QMARK           [ reduce using rule 39 (exp -> exp OR exp .) ]


state 159

    (34) exp -> exp LESSEQ exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 34 (exp -> exp LESSEQ exp .)
    SCOLON          reduce using rule 34 (exp -> exp LESSEQ exp .)
    RPAREN          reduce using rule 34 (exp -> exp LESSEQ exp .)
    COMMA           reduce using rule 34 (exp -> exp LESSEQ exp .)
    RBRAC           reduce using rule 34 (exp -> exp LESSEQ exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! MULT            [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! DIV             [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! MOD             [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! EQUAL           [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! DIFF            [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! LESSEQ          [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! GREATEQ         [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! GREATER         [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! LESS            [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! AND             [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! OR              [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]
  ! QMARK           [ reduce using rule 34 (exp -> exp LESSEQ exp .) ]


state 160

    (27) exp -> exp PLUS exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 27 (exp -> exp PLUS exp .)
    SCOLON          reduce using rule 27 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 27 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 27 (exp -> exp PLUS exp .)
    RBRAC           reduce using rule 27 (exp -> exp PLUS exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! MULT            [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! DIV             [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! MOD             [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! EQUAL           [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! DIFF            [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! LESSEQ          [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! GREATEQ         [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! GREATER         [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! LESS            [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! AND             [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! OR              [ reduce using rule 27 (exp -> exp PLUS exp .) ]
  ! QMARK           [ reduce using rule 27 (exp -> exp PLUS exp .) ]


state 161

    (33) exp -> exp DIFF exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 33 (exp -> exp DIFF exp .)
    SCOLON          reduce using rule 33 (exp -> exp DIFF exp .)
    RPAREN          reduce using rule 33 (exp -> exp DIFF exp .)
    COMMA           reduce using rule 33 (exp -> exp DIFF exp .)
    RBRAC           reduce using rule 33 (exp -> exp DIFF exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! MULT            [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! DIV             [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! MOD             [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! EQUAL           [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! DIFF            [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! LESSEQ          [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! GREATEQ         [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! GREATER         [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! LESS            [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! AND             [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! OR              [ reduce using rule 33 (exp -> exp DIFF exp .) ]
  ! QMARK           [ reduce using rule 33 (exp -> exp DIFF exp .) ]


state 162

    (30) exp -> exp DIV exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 30 (exp -> exp DIV exp .)
    SCOLON          reduce using rule 30 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 30 (exp -> exp DIV exp .)
    COMMA           reduce using rule 30 (exp -> exp DIV exp .)
    RBRAC           reduce using rule 30 (exp -> exp DIV exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! MULT            [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! DIV             [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! MOD             [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! EQUAL           [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! DIFF            [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! LESSEQ          [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! GREATEQ         [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! GREATER         [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! LESS            [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! AND             [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! OR              [ reduce using rule 30 (exp -> exp DIV exp .) ]
  ! QMARK           [ reduce using rule 30 (exp -> exp DIV exp .) ]


state 163

    (28) exp -> exp MINUS exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 28 (exp -> exp MINUS exp .)
    SCOLON          reduce using rule 28 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 28 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 28 (exp -> exp MINUS exp .)
    RBRAC           reduce using rule 28 (exp -> exp MINUS exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! MULT            [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! DIV             [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! MOD             [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! EQUAL           [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! DIFF            [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! LESSEQ          [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! GREATEQ         [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! GREATER         [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! LESS            [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! AND             [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! OR              [ reduce using rule 28 (exp -> exp MINUS exp .) ]
  ! QMARK           [ reduce using rule 28 (exp -> exp MINUS exp .) ]


state 164

    (29) exp -> exp MULT exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 29 (exp -> exp MULT exp .)
    SCOLON          reduce using rule 29 (exp -> exp MULT exp .)
    RPAREN          reduce using rule 29 (exp -> exp MULT exp .)
    COMMA           reduce using rule 29 (exp -> exp MULT exp .)
    RBRAC           reduce using rule 29 (exp -> exp MULT exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! MULT            [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! DIV             [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! MOD             [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! EQUAL           [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! DIFF            [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! LESSEQ          [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! GREATEQ         [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! GREATER         [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! LESS            [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! AND             [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! OR              [ reduce using rule 29 (exp -> exp MULT exp .) ]
  ! QMARK           [ reduce using rule 29 (exp -> exp MULT exp .) ]


state 165

    (31) exp -> exp MOD exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 31 (exp -> exp MOD exp .)
    SCOLON          reduce using rule 31 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 31 (exp -> exp MOD exp .)
    COMMA           reduce using rule 31 (exp -> exp MOD exp .)
    RBRAC           reduce using rule 31 (exp -> exp MOD exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! MULT            [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! DIV             [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! MOD             [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! EQUAL           [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! DIFF            [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! LESSEQ          [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! GREATEQ         [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! GREATER         [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! LESS            [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! AND             [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! OR              [ reduce using rule 31 (exp -> exp MOD exp .) ]
  ! QMARK           [ reduce using rule 31 (exp -> exp MOD exp .) ]


state 166

    (26) var -> ID LBRAC exp . RBRAC
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    RBRAC           shift and go to state 171
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 167

    (57) whileStmt -> WHILE LPAREN exp RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 175


state 168

    (58) forStmt -> FOR LPAREN assign SCOLON . exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 176
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 169

    (73) expSeq -> exp COMMA expSeq .

    RBRAC           reduce using rule 73 (expSeq -> exp COMMA expSeq .)
    SCOLON          reduce using rule 73 (expSeq -> exp COMMA expSeq .)


state 170

    (70) subCall -> ID LBRAC expList RBRAC .

    PLUS            reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    MINUS           reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    MULT            reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    DIV             reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    MOD             reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    EQUAL           reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    DIFF            reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    LESSEQ          reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    GREATEQ         reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    GREATER         reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    LESS            reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    AND             reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    OR              reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    QMARK           reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    SCOLON          reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    COMMA           reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    RPAREN          reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    RBRAC           reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)
    COLON           reduce using rule 70 (subCall -> ID LBRAC expList RBRAC .)


state 171

    (26) var -> ID LBRAC exp RBRAC .

    COLON           reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    PLUS            reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    MINUS           reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    MULT            reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    DIV             reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    MOD             reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    EQUAL           reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    DIFF            reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    LESSEQ          reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    GREATEQ         reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    GREATER         reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    LESS            reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    AND             reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    OR              reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    QMARK           reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    SCOLON          reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    RPAREN          reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    COMMA           reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    RBRAC           reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    ATTR            reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    AVALPLUS        reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    AVALMINUS       reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    AVALMULT        reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    AVALDIV         reduce using rule 26 (var -> ID LBRAC exp RBRAC .)
    AVALMOD         reduce using rule 26 (var -> ID LBRAC exp RBRAC .)


state 172

    (55) ifStmt -> IF LPAREN exp RPAREN . LCBRAC block RCBRAC
    (56) ifStmt -> IF LPAREN exp RPAREN . LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC

    LCBRAC          shift and go to state 177


state 173

    (16) literalSeq -> literal COMMA literalSeq .

    RCBRAC          reduce using rule 16 (literalSeq -> literal COMMA literalSeq .)


state 174

    (41) exp -> exp QMARK exp COLON . exp
    (27) exp -> . exp PLUS exp
    (28) exp -> . exp MINUS exp
    (29) exp -> . exp MULT exp
    (30) exp -> . exp DIV exp
    (31) exp -> . exp MOD exp
    (32) exp -> . exp EQUAL exp
    (33) exp -> . exp DIFF exp
    (34) exp -> . exp LESSEQ exp
    (35) exp -> . exp GREATEQ exp
    (36) exp -> . exp GREATER exp
    (37) exp -> . exp LESS exp
    (38) exp -> . exp AND exp
    (39) exp -> . exp OR exp
    (40) exp -> . NOT exp
    (41) exp -> . exp QMARK exp COLON exp
    (42) exp -> . subCall
    (43) exp -> . var
    (44) exp -> . literal
    (45) exp -> . LPAREN exp RPAREN
    (70) subCall -> . ID LBRAC expList RBRAC
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC
    (77) literal -> . num
    (78) literal -> . str
    (79) literal -> . logic
    (80) num -> . NUM
    (81) str -> . STR
    (82) logic -> . TRUE
    (83) logic -> . FALSE

    NOT             shift and go to state 91
    LPAREN          shift and go to state 89
    ID              shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 37
    TRUE            shift and go to state 42
    FALSE           shift and go to state 36

    subCall                        shift and go to state 85
    literal                        shift and go to state 87
    num                            shift and go to state 39
    str                            shift and go to state 40
    exp                            shift and go to state 178
    logic                          shift and go to state 41
    var                            shift and go to state 88

state 175

    (57) whileStmt -> WHILE LPAREN exp RPAREN LCBRAC . block RCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    block                          shift and go to state 179
    type                           shift and go to state 51
    empty                          shift and go to state 50
    varDecList                     shift and go to state 53

state 176

    (58) forStmt -> FOR LPAREN assign SCOLON exp . SCOLON assign RPAREN LCBRAC block RCBRAC
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

    SCOLON          shift and go to state 180
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122


state 177

    (55) ifStmt -> IF LPAREN exp RPAREN LCBRAC . block RCBRAC
    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC . block RCBRAC ELSE RCBRAC block LCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    block                          shift and go to state 181
    type                           shift and go to state 51
    empty                          shift and go to state 50
    varDecList                     shift and go to state 53

state 178

    (41) exp -> exp QMARK exp COLON exp .
    (27) exp -> exp . PLUS exp
    (28) exp -> exp . MINUS exp
    (29) exp -> exp . MULT exp
    (30) exp -> exp . DIV exp
    (31) exp -> exp . MOD exp
    (32) exp -> exp . EQUAL exp
    (33) exp -> exp . DIFF exp
    (34) exp -> exp . LESSEQ exp
    (35) exp -> exp . GREATEQ exp
    (36) exp -> exp . GREATER exp
    (37) exp -> exp . LESS exp
    (38) exp -> exp . AND exp
    (39) exp -> exp . OR exp
    (41) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    COLON           reduce using rule 41 (exp -> exp QMARK exp COLON exp .)
    SCOLON          reduce using rule 41 (exp -> exp QMARK exp COLON exp .)
    RPAREN          reduce using rule 41 (exp -> exp QMARK exp COLON exp .)
    COMMA           reduce using rule 41 (exp -> exp QMARK exp COLON exp .)
    RBRAC           reduce using rule 41 (exp -> exp QMARK exp COLON exp .)
    PLUS            shift and go to state 127
    MINUS           shift and go to state 130
    MULT            shift and go to state 131
    DIV             shift and go to state 129
    MOD             shift and go to state 132
    EQUAL           shift and go to state 123
    DIFF            shift and go to state 128
    LESSEQ          shift and go to state 126
    GREATEQ         shift and go to state 120
    GREATER         shift and go to state 119
    LESS            shift and go to state 121
    AND             shift and go to state 118
    OR              shift and go to state 125
    QMARK           shift and go to state 122

  ! PLUS            [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! MINUS           [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! MULT            [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! DIV             [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! MOD             [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! EQUAL           [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! DIFF            [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! LESSEQ          [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! GREATEQ         [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! GREATER         [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! LESS            [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! AND             [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! OR              [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]
  ! QMARK           [ reduce using rule 41 (exp -> exp QMARK exp COLON exp .) ]


state 179

    (57) whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 182


state 180

    (58) forStmt -> FOR LPAREN assign SCOLON exp SCOLON . assign RPAREN LCBRAC block RCBRAC
    (64) assign -> . var ATTR exp
    (65) assign -> . var AVALPLUS exp
    (66) assign -> . var AVALMINUS exp
    (67) assign -> . var AVALMULT exp
    (68) assign -> . var AVALDIV exp
    (69) assign -> . var AVALMOD exp
    (25) var -> . ID
    (26) var -> . ID LBRAC exp RBRAC

    ID              shift and go to state 94

    var                            shift and go to state 66
    assign                         shift and go to state 183

state 181

    (55) ifStmt -> IF LPAREN exp RPAREN LCBRAC block . RCBRAC
    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC block . RCBRAC ELSE RCBRAC block LCBRAC

    RCBRAC          shift and go to state 184


state 182

    (57) whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .

    IF              reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WHILE           reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    FOR             reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    BREAK           reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RETURN          reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    READ            reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WRITE           reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    ID              reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RCBRAC          reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    LCBRAC          reduce using rule 57 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)


state 183

    (58) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign . RPAREN LCBRAC block RCBRAC

    RPAREN          shift and go to state 185


state 184

    (55) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .
    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC . ELSE RCBRAC block LCBRAC

    IF              reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WHILE           reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    FOR             reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    BREAK           reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RETURN          reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    READ            reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WRITE           reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    ID              reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RCBRAC          reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    LCBRAC          reduce using rule 55 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    ELSE            shift and go to state 186


state 185

    (58) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 187


state 186

    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE . RCBRAC block LCBRAC

    RCBRAC          shift and go to state 188


state 187

    (58) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC . block RCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    RCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    empty                          shift and go to state 50
    type                           shift and go to state 51
    block                          shift and go to state 189
    varDecList                     shift and go to state 53

state 188

    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC . block LCBRAC
    (22) block -> . varDecList stmtList
    (23) varDecList -> . varDec varDecList
    (24) varDecList -> . empty
    (9) varDec -> . type varSpecSeq SCOLON
    (91) empty -> .
    (84) type -> . INT
    (85) type -> . STRING
    (86) type -> . BOOL

    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    READ            reduce using rule 91 (empty -> .)
    WRITE           reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    LCBRAC          reduce using rule 91 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 49
    block                          shift and go to state 190
    type                           shift and go to state 51
    empty                          shift and go to state 50
    varDecList                     shift and go to state 53

state 189

    (58) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 191


state 190

    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block . LCBRAC

    LCBRAC          shift and go to state 192


state 191

    (58) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .

    IF              reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    WHILE           reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    FOR             reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    BREAK           reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    RETURN          reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    READ            reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    WRITE           reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    ID              reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    RCBRAC          reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    LCBRAC          reduce using rule 58 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)


state 192

    (56) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .

    IF              reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    WHILE           reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    FOR             reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    BREAK           reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    RETURN          reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    READ            reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    WRITE           reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    ID              reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    RCBRAC          reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    LCBRAC          reduce using rule 56 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 133 resolved as shift
WARNING: shift/reduce conflict for MULT in state 133 resolved as shift
WARNING: shift/reduce conflict for DIV in state 133 resolved as shift
WARNING: shift/reduce conflict for MOD in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 133 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 133 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 133 resolved as shift
WARNING: shift/reduce conflict for LESS in state 133 resolved as shift
WARNING: shift/reduce conflict for AND in state 133 resolved as shift
WARNING: shift/reduce conflict for OR in state 133 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 133 resolved as shift
WARNING: shift/reduce conflict for RBRAC in state 147 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for MULT in state 152 resolved as shift
WARNING: shift/reduce conflict for DIV in state 152 resolved as shift
WARNING: shift/reduce conflict for MOD in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 152 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 152 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 152 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 152 resolved as shift
WARNING: shift/reduce conflict for LESS in state 152 resolved as shift
WARNING: shift/reduce conflict for AND in state 152 resolved as shift
WARNING: shift/reduce conflict for OR in state 152 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 152 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 153 resolved as shift
WARNING: shift/reduce conflict for MULT in state 153 resolved as shift
WARNING: shift/reduce conflict for DIV in state 153 resolved as shift
WARNING: shift/reduce conflict for MOD in state 153 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 153 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 153 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 153 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 153 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 153 resolved as shift
WARNING: shift/reduce conflict for LESS in state 153 resolved as shift
WARNING: shift/reduce conflict for AND in state 153 resolved as shift
WARNING: shift/reduce conflict for OR in state 153 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 153 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for MULT in state 154 resolved as shift
WARNING: shift/reduce conflict for DIV in state 154 resolved as shift
WARNING: shift/reduce conflict for MOD in state 154 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 154 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 154 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 154 resolved as shift
WARNING: shift/reduce conflict for LESS in state 154 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 154 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MULT in state 155 resolved as shift
WARNING: shift/reduce conflict for DIV in state 155 resolved as shift
WARNING: shift/reduce conflict for MOD in state 155 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 155 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 155 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 155 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 155 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 155 resolved as shift
WARNING: shift/reduce conflict for LESS in state 155 resolved as shift
WARNING: shift/reduce conflict for AND in state 155 resolved as shift
WARNING: shift/reduce conflict for OR in state 155 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 157 resolved as shift
WARNING: shift/reduce conflict for MULT in state 157 resolved as shift
WARNING: shift/reduce conflict for DIV in state 157 resolved as shift
WARNING: shift/reduce conflict for MOD in state 157 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 157 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 157 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 157 resolved as shift
WARNING: shift/reduce conflict for LESS in state 157 resolved as shift
WARNING: shift/reduce conflict for AND in state 157 resolved as shift
WARNING: shift/reduce conflict for OR in state 157 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 157 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 158 resolved as shift
WARNING: shift/reduce conflict for MULT in state 158 resolved as shift
WARNING: shift/reduce conflict for DIV in state 158 resolved as shift
WARNING: shift/reduce conflict for MOD in state 158 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 158 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 158 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 158 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 158 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 158 resolved as shift
WARNING: shift/reduce conflict for LESS in state 158 resolved as shift
WARNING: shift/reduce conflict for AND in state 158 resolved as shift
WARNING: shift/reduce conflict for OR in state 158 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MULT in state 159 resolved as shift
WARNING: shift/reduce conflict for DIV in state 159 resolved as shift
WARNING: shift/reduce conflict for MOD in state 159 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 159 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 159 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 159 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 159 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 159 resolved as shift
WARNING: shift/reduce conflict for LESS in state 159 resolved as shift
WARNING: shift/reduce conflict for AND in state 159 resolved as shift
WARNING: shift/reduce conflict for OR in state 159 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MULT in state 160 resolved as shift
WARNING: shift/reduce conflict for DIV in state 160 resolved as shift
WARNING: shift/reduce conflict for MOD in state 160 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 160 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 160 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 160 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 160 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 160 resolved as shift
WARNING: shift/reduce conflict for LESS in state 160 resolved as shift
WARNING: shift/reduce conflict for AND in state 160 resolved as shift
WARNING: shift/reduce conflict for OR in state 160 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MULT in state 161 resolved as shift
WARNING: shift/reduce conflict for DIV in state 161 resolved as shift
WARNING: shift/reduce conflict for MOD in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 161 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 161 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MULT in state 162 resolved as shift
WARNING: shift/reduce conflict for DIV in state 162 resolved as shift
WARNING: shift/reduce conflict for MOD in state 162 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 162 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 162 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 162 resolved as shift
WARNING: shift/reduce conflict for LESS in state 162 resolved as shift
WARNING: shift/reduce conflict for AND in state 162 resolved as shift
WARNING: shift/reduce conflict for OR in state 162 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 163 resolved as shift
WARNING: shift/reduce conflict for MULT in state 163 resolved as shift
WARNING: shift/reduce conflict for DIV in state 163 resolved as shift
WARNING: shift/reduce conflict for MOD in state 163 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 163 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 163 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 163 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 163 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 163 resolved as shift
WARNING: shift/reduce conflict for LESS in state 163 resolved as shift
WARNING: shift/reduce conflict for AND in state 163 resolved as shift
WARNING: shift/reduce conflict for OR in state 163 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 163 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MULT in state 164 resolved as shift
WARNING: shift/reduce conflict for DIV in state 164 resolved as shift
WARNING: shift/reduce conflict for MOD in state 164 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 164 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 164 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 164 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 164 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 164 resolved as shift
WARNING: shift/reduce conflict for LESS in state 164 resolved as shift
WARNING: shift/reduce conflict for AND in state 164 resolved as shift
WARNING: shift/reduce conflict for OR in state 164 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 165 resolved as shift
WARNING: shift/reduce conflict for MULT in state 165 resolved as shift
WARNING: shift/reduce conflict for DIV in state 165 resolved as shift
WARNING: shift/reduce conflict for MOD in state 165 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 165 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 165 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 165 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 178 resolved as shift
WARNING: shift/reduce conflict for MULT in state 178 resolved as shift
WARNING: shift/reduce conflict for DIV in state 178 resolved as shift
WARNING: shift/reduce conflict for MOD in state 178 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 178 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 178 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 178 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 178 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 178 resolved as shift
WARNING: shift/reduce conflict for LESS in state 178 resolved as shift
WARNING: shift/reduce conflict for AND in state 178 resolved as shift
WARNING: shift/reduce conflict for OR in state 178 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 178 resolved as shift
