Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Unused terminals:

    THEN
    VOID
    FUNCTION

Grammar

Rule 0     S' -> program
Rule 1     program -> decSeq
Rule 2     dec -> varDec
Rule 3     dec -> decFunc
Rule 4     dec -> decProc
Rule 5     decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC
Rule 6     decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC
Rule 7     varDec -> type varSpecSeq SCOLON
Rule 8     varSpec -> ID
Rule 9     varSpec -> ID ATTR literal
Rule 10    varSpec -> ID LBRAC num RBRAC
Rule 11    varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC
Rule 12    varSpecSeq -> varSpec COMMA varSpecSeq
Rule 13    varSpecSeq -> varSpec
Rule 14    literalSeq -> literal COMMA literalSeq
Rule 15    literalSeq -> literal
Rule 16    paramList -> paramSeq
Rule 17    paramList -> empty
Rule 18    param -> type ID
Rule 19    param -> type ID LBRAC RBRAC
Rule 20    block -> varDecList stmtList
Rule 21    varDecList -> varDec varDecList
Rule 22    varDecList -> empty
Rule 23    var -> ID
Rule 24    var -> ID LBRAC exp RBRAC
Rule 25    exp -> exp PLUS exp
Rule 26    exp -> exp MINUS exp
Rule 27    exp -> exp MULT exp
Rule 28    exp -> exp DIV exp
Rule 29    exp -> exp MOD exp
Rule 30    exp -> exp EQUAL exp
Rule 31    exp -> exp DIFF exp
Rule 32    exp -> exp LESSEQ exp
Rule 33    exp -> exp GREATEQ exp
Rule 34    exp -> exp GREATER exp
Rule 35    exp -> exp LESS exp
Rule 36    exp -> exp AND exp
Rule 37    exp -> exp OR exp
Rule 38    exp -> NOT exp
Rule 39    exp -> exp QMARK exp COLON exp
Rule 40    exp -> subCall
Rule 41    exp -> var
Rule 42    exp -> literal
Rule 43    exp -> LPAREN exp RPAREN
Rule 44    stmt -> ifStmt
Rule 45    stmt -> whileStmt
Rule 46    stmt -> forStmt
Rule 47    stmt -> breakStmt
Rule 48    stmt -> returnStmt
Rule 49    stmt -> readStmt
Rule 50    stmt -> writeStmt
Rule 51    stmt -> assign SCOLON
Rule 52    stmt -> subCall SCOLON
Rule 53    ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC
Rule 54    ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
Rule 55    whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC
Rule 56    forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
Rule 57    breakStmt -> BREAK SCOLON
Rule 58    returnStmt -> RETURN SCOLON
Rule 59    returnStmt -> RETURN exp SCOLON
Rule 60    returnStmt -> RETURN error SCOLON
Rule 61    readStmt -> READ var SCOLON
Rule 62    writeStmt -> WRITE expList SCOLON
Rule 63    assign -> var ATTR exp
Rule 64    assign -> var AVALPLUS exp
Rule 65    assign -> var AVALMINUS exp
Rule 66    assign -> var AVALMULT exp
Rule 67    assign -> var AVALDIV exp
Rule 68    assign -> var AVALMOD exp
Rule 69    subCall -> ID LPAREN expList RPAREN
Rule 70    expList -> expSeq
Rule 71    expList -> empty
Rule 72    expSeq -> exp COMMA expSeq
Rule 73    expSeq -> exp
Rule 74    stmtList -> stmt stmtList
Rule 75    stmtList -> empty
Rule 76    literal -> num
Rule 77    literal -> str
Rule 78    literal -> logic
Rule 79    num -> NUM
Rule 80    str -> STR
Rule 81    logic -> TRUE
Rule 82    logic -> FALSE
Rule 83    type -> INT
Rule 84    type -> STRING
Rule 85    type -> BOOL
Rule 86    decSeq -> dec decSeq
Rule 87    decSeq -> dec
Rule 88    paramSeq -> param COMMA paramSeq
Rule 89    paramSeq -> param
Rule 90    empty -> <empty>

Terminals, with rules where they appear

AND                  : 36
ATTR                 : 9 11 63
AVALDIV              : 67
AVALMINUS            : 65
AVALMOD              : 68
AVALMULT             : 66
AVALPLUS             : 64
BOOL                 : 85
BREAK                : 57
COLON                : 39
COMMA                : 12 14 72 88
DIFF                 : 31
DIV                  : 28
ELSE                 : 54
EQUAL                : 30
FALSE                : 82
FOR                  : 56
FUNCTION             : 
GREATEQ              : 33
GREATER              : 34
ID                   : 5 6 8 9 10 11 18 19 23 24 69
IF                   : 53 54
INT                  : 83
LBRAC                : 10 11 19 24
LCBRAC               : 5 6 11 53 54 54 55 56
LESS                 : 35
LESSEQ               : 32
LPAREN               : 5 6 43 53 54 55 56 69
MINUS                : 26
MOD                  : 29
MULT                 : 27
NOT                  : 38
NUM                  : 79
OR                   : 37
PLUS                 : 25
QMARK                : 39
RBRAC                : 10 11 19 24
RCBRAC               : 5 6 11 53 54 54 55 56
READ                 : 61
RETURN               : 58 59 60
RPAREN               : 5 6 43 53 54 55 56 69
SCOLON               : 7 51 52 56 56 57 58 59 60 61 62
STR                  : 80
STRING               : 84
THEN                 : 
TRUE                 : 81
VOID                 : 
WHILE                : 55
WRITE                : 62
error                : 60

Nonterminals, with rules where they appear

assign               : 51 56 56
block                : 5 6 53 54 54 55 56
breakStmt            : 47
dec                  : 86 87
decFunc              : 3
decProc              : 4
decSeq               : 1 86
empty                : 17 22 71 75
exp                  : 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 39 39 39 43 53 54 55 56 59 63 64 65 66 67 68 72 73
expList              : 62 69
expSeq               : 70 72
forStmt              : 46
ifStmt               : 44
literal              : 9 14 15 42
literalSeq           : 11 14
logic                : 78
num                  : 10 11 76
param                : 88 89
paramList            : 5 6
paramSeq             : 16 88
program              : 0
readStmt             : 49
returnStmt           : 48
stmt                 : 74
stmtList             : 20 74
str                  : 77
subCall              : 40 52
type                 : 5 7 18 19
var                  : 41 61 63 64 65 66 67 68
varDec               : 2 21
varDecList           : 20 21
varSpec              : 12 13
varSpecSeq           : 7 12
whileStmt            : 45
writeStmt            : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . decSeq
    (86) decSeq -> . dec decSeq
    (87) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . decFunc
    (4) dec -> . decProc
    (7) varDec -> . type varSpecSeq SCOLON
    (5) decFunc -> . type ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (6) decProc -> . ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    ID              shift and go to state 5
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 1
    decProc                        shift and go to state 2
    decSeq                         shift and go to state 4
    program                        shift and go to state 6
    dec                            shift and go to state 8
    type                           shift and go to state 9
    decFunc                        shift and go to state 10

state 1

    (2) dec -> varDec .

    ID              reduce using rule 2 (dec -> varDec .)
    INT             reduce using rule 2 (dec -> varDec .)
    STRING          reduce using rule 2 (dec -> varDec .)
    BOOL            reduce using rule 2 (dec -> varDec .)
    $end            reduce using rule 2 (dec -> varDec .)


state 2

    (4) dec -> decProc .

    ID              reduce using rule 4 (dec -> decProc .)
    INT             reduce using rule 4 (dec -> decProc .)
    STRING          reduce using rule 4 (dec -> decProc .)
    BOOL            reduce using rule 4 (dec -> decProc .)
    $end            reduce using rule 4 (dec -> decProc .)


state 3

    (83) type -> INT .

    ID              reduce using rule 83 (type -> INT .)


state 4

    (1) program -> decSeq .

    $end            reduce using rule 1 (program -> decSeq .)


state 5

    (6) decProc -> ID . LPAREN paramList RPAREN LCBRAC block RCBRAC

    LPAREN          shift and go to state 12


state 6

    (0) S' -> program .



state 7

    (85) type -> BOOL .

    ID              reduce using rule 85 (type -> BOOL .)


state 8

    (86) decSeq -> dec . decSeq
    (87) decSeq -> dec .
    (86) decSeq -> . dec decSeq
    (87) decSeq -> . dec
    (2) dec -> . varDec
    (3) dec -> . decFunc
    (4) dec -> . decProc
    (7) varDec -> . type varSpecSeq SCOLON
    (5) decFunc -> . type ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (6) decProc -> . ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    $end            reduce using rule 87 (decSeq -> dec .)
    ID              shift and go to state 5
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 1
    decProc                        shift and go to state 2
    decSeq                         shift and go to state 13
    dec                            shift and go to state 8
    type                           shift and go to state 9
    decFunc                        shift and go to state 10

state 9

    (7) varDec -> type . varSpecSeq SCOLON
    (5) decFunc -> type . ID LPAREN paramList RPAREN LCBRAC block RCBRAC
    (12) varSpecSeq -> . varSpec COMMA varSpecSeq
    (13) varSpecSeq -> . varSpec
    (8) varSpec -> . ID
    (9) varSpec -> . ID ATTR literal
    (10) varSpec -> . ID LBRAC num RBRAC
    (11) varSpec -> . ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    ID              shift and go to state 16

    varSpec                        shift and go to state 14
    varSpecSeq                     shift and go to state 15

state 10

    (3) dec -> decFunc .

    ID              reduce using rule 3 (dec -> decFunc .)
    INT             reduce using rule 3 (dec -> decFunc .)
    STRING          reduce using rule 3 (dec -> decFunc .)
    BOOL            reduce using rule 3 (dec -> decFunc .)
    $end            reduce using rule 3 (dec -> decFunc .)


state 11

    (84) type -> STRING .

    ID              reduce using rule 84 (type -> STRING .)


state 12

    (6) decProc -> ID LPAREN . paramList RPAREN LCBRAC block RCBRAC
    (16) paramList -> . paramSeq
    (17) paramList -> . empty
    (88) paramSeq -> . param COMMA paramSeq
    (89) paramSeq -> . param
    (90) empty -> .
    (18) param -> . type ID
    (19) param -> . type ID LBRAC RBRAC
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    RPAREN          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    paramSeq                       shift and go to state 17
    param                          shift and go to state 19
    paramList                      shift and go to state 18
    type                           shift and go to state 21
    empty                          shift and go to state 20

state 13

    (86) decSeq -> dec decSeq .

    $end            reduce using rule 86 (decSeq -> dec decSeq .)


state 14

    (12) varSpecSeq -> varSpec . COMMA varSpecSeq
    (13) varSpecSeq -> varSpec .

    COMMA           shift and go to state 22
    SCOLON          reduce using rule 13 (varSpecSeq -> varSpec .)


state 15

    (7) varDec -> type varSpecSeq . SCOLON

    SCOLON          shift and go to state 23


state 16

    (5) decFunc -> type ID . LPAREN paramList RPAREN LCBRAC block RCBRAC
    (8) varSpec -> ID .
    (9) varSpec -> ID . ATTR literal
    (10) varSpec -> ID . LBRAC num RBRAC
    (11) varSpec -> ID . LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    LPAREN          shift and go to state 25
    COMMA           reduce using rule 8 (varSpec -> ID .)
    SCOLON          reduce using rule 8 (varSpec -> ID .)
    ATTR            shift and go to state 26
    LBRAC           shift and go to state 24


state 17

    (16) paramList -> paramSeq .

    RPAREN          reduce using rule 16 (paramList -> paramSeq .)


state 18

    (6) decProc -> ID LPAREN paramList . RPAREN LCBRAC block RCBRAC

    RPAREN          shift and go to state 27


state 19

    (88) paramSeq -> param . COMMA paramSeq
    (89) paramSeq -> param .

    COMMA           shift and go to state 28
    RPAREN          reduce using rule 89 (paramSeq -> param .)


state 20

    (17) paramList -> empty .

    RPAREN          reduce using rule 17 (paramList -> empty .)


state 21

    (18) param -> type . ID
    (19) param -> type . ID LBRAC RBRAC

    ID              shift and go to state 29


state 22

    (12) varSpecSeq -> varSpec COMMA . varSpecSeq
    (12) varSpecSeq -> . varSpec COMMA varSpecSeq
    (13) varSpecSeq -> . varSpec
    (8) varSpec -> . ID
    (9) varSpec -> . ID ATTR literal
    (10) varSpec -> . ID LBRAC num RBRAC
    (11) varSpec -> . ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    ID              shift and go to state 31

    varSpec                        shift and go to state 14
    varSpecSeq                     shift and go to state 30

state 23

    (7) varDec -> type varSpecSeq SCOLON .

    ID              reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    INT             reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    STRING          reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    BOOL            reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    $end            reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    IF              reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    WHILE           reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    FOR             reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    BREAK           reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    RETURN          reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    READ            reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    WRITE           reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    RCBRAC          reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)
    LCBRAC          reduce using rule 7 (varDec -> type varSpecSeq SCOLON .)


state 24

    (10) varSpec -> ID LBRAC . num RBRAC
    (11) varSpec -> ID LBRAC . num RBRAC ATTR LCBRAC literalSeq RCBRAC
    (79) num -> . NUM

    NUM             shift and go to state 33

    num                            shift and go to state 32

state 25

    (5) decFunc -> type ID LPAREN . paramList RPAREN LCBRAC block RCBRAC
    (16) paramList -> . paramSeq
    (17) paramList -> . empty
    (88) paramSeq -> . param COMMA paramSeq
    (89) paramSeq -> . param
    (90) empty -> .
    (18) param -> . type ID
    (19) param -> . type ID LBRAC RBRAC
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    RPAREN          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    paramSeq                       shift and go to state 17
    param                          shift and go to state 19
    paramList                      shift and go to state 34
    type                           shift and go to state 21
    empty                          shift and go to state 20

state 26

    (9) varSpec -> ID ATTR . literal
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    literal                        shift and go to state 37
    num                            shift and go to state 38
    str                            shift and go to state 39
    logic                          shift and go to state 40

state 27

    (6) decProc -> ID LPAREN paramList RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 42


state 28

    (88) paramSeq -> param COMMA . paramSeq
    (88) paramSeq -> . param COMMA paramSeq
    (89) paramSeq -> . param
    (18) param -> . type ID
    (19) param -> . type ID LBRAC RBRAC
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    paramSeq                       shift and go to state 43
    type                           shift and go to state 21
    param                          shift and go to state 19

state 29

    (18) param -> type ID .
    (19) param -> type ID . LBRAC RBRAC

    COMMA           reduce using rule 18 (param -> type ID .)
    RPAREN          reduce using rule 18 (param -> type ID .)
    LBRAC           shift and go to state 44


state 30

    (12) varSpecSeq -> varSpec COMMA varSpecSeq .

    SCOLON          reduce using rule 12 (varSpecSeq -> varSpec COMMA varSpecSeq .)


state 31

    (8) varSpec -> ID .
    (9) varSpec -> ID . ATTR literal
    (10) varSpec -> ID . LBRAC num RBRAC
    (11) varSpec -> ID . LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    COMMA           reduce using rule 8 (varSpec -> ID .)
    SCOLON          reduce using rule 8 (varSpec -> ID .)
    ATTR            shift and go to state 26
    LBRAC           shift and go to state 24


state 32

    (10) varSpec -> ID LBRAC num . RBRAC
    (11) varSpec -> ID LBRAC num . RBRAC ATTR LCBRAC literalSeq RCBRAC

    RBRAC           shift and go to state 45


state 33

    (79) num -> NUM .

    RPAREN          reduce using rule 79 (num -> NUM .)
    PLUS            reduce using rule 79 (num -> NUM .)
    MINUS           reduce using rule 79 (num -> NUM .)
    MULT            reduce using rule 79 (num -> NUM .)
    DIV             reduce using rule 79 (num -> NUM .)
    MOD             reduce using rule 79 (num -> NUM .)
    EQUAL           reduce using rule 79 (num -> NUM .)
    DIFF            reduce using rule 79 (num -> NUM .)
    LESSEQ          reduce using rule 79 (num -> NUM .)
    GREATEQ         reduce using rule 79 (num -> NUM .)
    GREATER         reduce using rule 79 (num -> NUM .)
    LESS            reduce using rule 79 (num -> NUM .)
    AND             reduce using rule 79 (num -> NUM .)
    OR              reduce using rule 79 (num -> NUM .)
    QMARK           reduce using rule 79 (num -> NUM .)
    COMMA           reduce using rule 79 (num -> NUM .)
    RCBRAC          reduce using rule 79 (num -> NUM .)
    SCOLON          reduce using rule 79 (num -> NUM .)
    RBRAC           reduce using rule 79 (num -> NUM .)
    COLON           reduce using rule 79 (num -> NUM .)


state 34

    (5) decFunc -> type ID LPAREN paramList . RPAREN LCBRAC block RCBRAC

    RPAREN          shift and go to state 46


state 35

    (82) logic -> FALSE .

    PLUS            reduce using rule 82 (logic -> FALSE .)
    MINUS           reduce using rule 82 (logic -> FALSE .)
    MULT            reduce using rule 82 (logic -> FALSE .)
    DIV             reduce using rule 82 (logic -> FALSE .)
    MOD             reduce using rule 82 (logic -> FALSE .)
    EQUAL           reduce using rule 82 (logic -> FALSE .)
    DIFF            reduce using rule 82 (logic -> FALSE .)
    LESSEQ          reduce using rule 82 (logic -> FALSE .)
    GREATEQ         reduce using rule 82 (logic -> FALSE .)
    GREATER         reduce using rule 82 (logic -> FALSE .)
    LESS            reduce using rule 82 (logic -> FALSE .)
    AND             reduce using rule 82 (logic -> FALSE .)
    OR              reduce using rule 82 (logic -> FALSE .)
    QMARK           reduce using rule 82 (logic -> FALSE .)
    SCOLON          reduce using rule 82 (logic -> FALSE .)
    RPAREN          reduce using rule 82 (logic -> FALSE .)
    COMMA           reduce using rule 82 (logic -> FALSE .)
    RBRAC           reduce using rule 82 (logic -> FALSE .)
    COLON           reduce using rule 82 (logic -> FALSE .)
    RCBRAC          reduce using rule 82 (logic -> FALSE .)


state 36

    (80) str -> STR .

    PLUS            reduce using rule 80 (str -> STR .)
    MINUS           reduce using rule 80 (str -> STR .)
    MULT            reduce using rule 80 (str -> STR .)
    DIV             reduce using rule 80 (str -> STR .)
    MOD             reduce using rule 80 (str -> STR .)
    EQUAL           reduce using rule 80 (str -> STR .)
    DIFF            reduce using rule 80 (str -> STR .)
    LESSEQ          reduce using rule 80 (str -> STR .)
    GREATEQ         reduce using rule 80 (str -> STR .)
    GREATER         reduce using rule 80 (str -> STR .)
    LESS            reduce using rule 80 (str -> STR .)
    AND             reduce using rule 80 (str -> STR .)
    OR              reduce using rule 80 (str -> STR .)
    QMARK           reduce using rule 80 (str -> STR .)
    SCOLON          reduce using rule 80 (str -> STR .)
    RPAREN          reduce using rule 80 (str -> STR .)
    COMMA           reduce using rule 80 (str -> STR .)
    RBRAC           reduce using rule 80 (str -> STR .)
    COLON           reduce using rule 80 (str -> STR .)
    RCBRAC          reduce using rule 80 (str -> STR .)


state 37

    (9) varSpec -> ID ATTR literal .

    COMMA           reduce using rule 9 (varSpec -> ID ATTR literal .)
    SCOLON          reduce using rule 9 (varSpec -> ID ATTR literal .)


state 38

    (76) literal -> num .

    PLUS            reduce using rule 76 (literal -> num .)
    MINUS           reduce using rule 76 (literal -> num .)
    MULT            reduce using rule 76 (literal -> num .)
    DIV             reduce using rule 76 (literal -> num .)
    MOD             reduce using rule 76 (literal -> num .)
    EQUAL           reduce using rule 76 (literal -> num .)
    DIFF            reduce using rule 76 (literal -> num .)
    LESSEQ          reduce using rule 76 (literal -> num .)
    GREATEQ         reduce using rule 76 (literal -> num .)
    GREATER         reduce using rule 76 (literal -> num .)
    LESS            reduce using rule 76 (literal -> num .)
    AND             reduce using rule 76 (literal -> num .)
    OR              reduce using rule 76 (literal -> num .)
    QMARK           reduce using rule 76 (literal -> num .)
    SCOLON          reduce using rule 76 (literal -> num .)
    COMMA           reduce using rule 76 (literal -> num .)
    RPAREN          reduce using rule 76 (literal -> num .)
    RBRAC           reduce using rule 76 (literal -> num .)
    COLON           reduce using rule 76 (literal -> num .)
    RCBRAC          reduce using rule 76 (literal -> num .)


state 39

    (77) literal -> str .

    PLUS            reduce using rule 77 (literal -> str .)
    MINUS           reduce using rule 77 (literal -> str .)
    MULT            reduce using rule 77 (literal -> str .)
    DIV             reduce using rule 77 (literal -> str .)
    MOD             reduce using rule 77 (literal -> str .)
    EQUAL           reduce using rule 77 (literal -> str .)
    DIFF            reduce using rule 77 (literal -> str .)
    LESSEQ          reduce using rule 77 (literal -> str .)
    GREATEQ         reduce using rule 77 (literal -> str .)
    GREATER         reduce using rule 77 (literal -> str .)
    LESS            reduce using rule 77 (literal -> str .)
    AND             reduce using rule 77 (literal -> str .)
    OR              reduce using rule 77 (literal -> str .)
    QMARK           reduce using rule 77 (literal -> str .)
    SCOLON          reduce using rule 77 (literal -> str .)
    COMMA           reduce using rule 77 (literal -> str .)
    RPAREN          reduce using rule 77 (literal -> str .)
    RBRAC           reduce using rule 77 (literal -> str .)
    COLON           reduce using rule 77 (literal -> str .)
    RCBRAC          reduce using rule 77 (literal -> str .)


state 40

    (78) literal -> logic .

    PLUS            reduce using rule 78 (literal -> logic .)
    MINUS           reduce using rule 78 (literal -> logic .)
    MULT            reduce using rule 78 (literal -> logic .)
    DIV             reduce using rule 78 (literal -> logic .)
    MOD             reduce using rule 78 (literal -> logic .)
    EQUAL           reduce using rule 78 (literal -> logic .)
    DIFF            reduce using rule 78 (literal -> logic .)
    LESSEQ          reduce using rule 78 (literal -> logic .)
    GREATEQ         reduce using rule 78 (literal -> logic .)
    GREATER         reduce using rule 78 (literal -> logic .)
    LESS            reduce using rule 78 (literal -> logic .)
    AND             reduce using rule 78 (literal -> logic .)
    OR              reduce using rule 78 (literal -> logic .)
    QMARK           reduce using rule 78 (literal -> logic .)
    SCOLON          reduce using rule 78 (literal -> logic .)
    COMMA           reduce using rule 78 (literal -> logic .)
    RPAREN          reduce using rule 78 (literal -> logic .)
    RBRAC           reduce using rule 78 (literal -> logic .)
    COLON           reduce using rule 78 (literal -> logic .)
    RCBRAC          reduce using rule 78 (literal -> logic .)


state 41

    (81) logic -> TRUE .

    PLUS            reduce using rule 81 (logic -> TRUE .)
    MINUS           reduce using rule 81 (logic -> TRUE .)
    MULT            reduce using rule 81 (logic -> TRUE .)
    DIV             reduce using rule 81 (logic -> TRUE .)
    MOD             reduce using rule 81 (logic -> TRUE .)
    EQUAL           reduce using rule 81 (logic -> TRUE .)
    DIFF            reduce using rule 81 (logic -> TRUE .)
    LESSEQ          reduce using rule 81 (logic -> TRUE .)
    GREATEQ         reduce using rule 81 (logic -> TRUE .)
    GREATER         reduce using rule 81 (logic -> TRUE .)
    LESS            reduce using rule 81 (logic -> TRUE .)
    AND             reduce using rule 81 (logic -> TRUE .)
    OR              reduce using rule 81 (logic -> TRUE .)
    QMARK           reduce using rule 81 (logic -> TRUE .)
    SCOLON          reduce using rule 81 (logic -> TRUE .)
    RPAREN          reduce using rule 81 (logic -> TRUE .)
    COMMA           reduce using rule 81 (logic -> TRUE .)
    RBRAC           reduce using rule 81 (logic -> TRUE .)
    COLON           reduce using rule 81 (logic -> TRUE .)
    RCBRAC          reduce using rule 81 (logic -> TRUE .)


state 42

    (6) decProc -> ID LPAREN paramList RPAREN LCBRAC . block RCBRAC
    (20) block -> . varDecList stmtList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    block                          shift and go to state 50
    type                           shift and go to state 49
    empty                          shift and go to state 48
    varDecList                     shift and go to state 51

state 43

    (88) paramSeq -> param COMMA paramSeq .

    RPAREN          reduce using rule 88 (paramSeq -> param COMMA paramSeq .)


state 44

    (19) param -> type ID LBRAC . RBRAC

    RBRAC           shift and go to state 52


state 45

    (10) varSpec -> ID LBRAC num RBRAC .
    (11) varSpec -> ID LBRAC num RBRAC . ATTR LCBRAC literalSeq RCBRAC

    COMMA           reduce using rule 10 (varSpec -> ID LBRAC num RBRAC .)
    SCOLON          reduce using rule 10 (varSpec -> ID LBRAC num RBRAC .)
    ATTR            shift and go to state 53


state 46

    (5) decFunc -> type ID LPAREN paramList RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 54


state 47

    (21) varDecList -> varDec . varDecList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RCBRAC          reduce using rule 90 (empty -> .)
    LCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    type                           shift and go to state 49
    empty                          shift and go to state 48
    varDecList                     shift and go to state 55

state 48

    (22) varDecList -> empty .

    IF              reduce using rule 22 (varDecList -> empty .)
    WHILE           reduce using rule 22 (varDecList -> empty .)
    FOR             reduce using rule 22 (varDecList -> empty .)
    BREAK           reduce using rule 22 (varDecList -> empty .)
    RETURN          reduce using rule 22 (varDecList -> empty .)
    READ            reduce using rule 22 (varDecList -> empty .)
    WRITE           reduce using rule 22 (varDecList -> empty .)
    ID              reduce using rule 22 (varDecList -> empty .)
    RCBRAC          reduce using rule 22 (varDecList -> empty .)
    LCBRAC          reduce using rule 22 (varDecList -> empty .)


state 49

    (7) varDec -> type . varSpecSeq SCOLON
    (12) varSpecSeq -> . varSpec COMMA varSpecSeq
    (13) varSpecSeq -> . varSpec
    (8) varSpec -> . ID
    (9) varSpec -> . ID ATTR literal
    (10) varSpec -> . ID LBRAC num RBRAC
    (11) varSpec -> . ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC

    ID              shift and go to state 31

    varSpec                        shift and go to state 14
    varSpecSeq                     shift and go to state 15

state 50

    (6) decProc -> ID LPAREN paramList RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 56


state 51

    (20) block -> varDecList . stmtList
    (74) stmtList -> . stmt stmtList
    (75) stmtList -> . empty
    (44) stmt -> . ifStmt
    (45) stmt -> . whileStmt
    (46) stmt -> . forStmt
    (47) stmt -> . breakStmt
    (48) stmt -> . returnStmt
    (49) stmt -> . readStmt
    (50) stmt -> . writeStmt
    (51) stmt -> . assign SCOLON
    (52) stmt -> . subCall SCOLON
    (90) empty -> .
    (53) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC
    (54) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (55) whileStmt -> . WHILE LPAREN exp RPAREN LCBRAC block RCBRAC
    (56) forStmt -> . FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (57) breakStmt -> . BREAK SCOLON
    (58) returnStmt -> . RETURN SCOLON
    (59) returnStmt -> . RETURN exp SCOLON
    (60) returnStmt -> . RETURN error SCOLON
    (61) readStmt -> . READ var SCOLON
    (62) writeStmt -> . WRITE expList SCOLON
    (63) assign -> . var ATTR exp
    (64) assign -> . var AVALPLUS exp
    (65) assign -> . var AVALMINUS exp
    (66) assign -> . var AVALMULT exp
    (67) assign -> . var AVALDIV exp
    (68) assign -> . var AVALMOD exp
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC

    RCBRAC          reduce using rule 90 (empty -> .)
    LCBRAC          reduce using rule 90 (empty -> .)
    IF              shift and go to state 71
    WHILE           shift and go to state 60
    FOR             shift and go to state 65
    BREAK           shift and go to state 74
    RETURN          shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 70

    writeStmt                      shift and go to state 72
    readStmt                       shift and go to state 61
    breakStmt                      shift and go to state 66
    subCall                        shift and go to state 58
    stmt                           shift and go to state 67
    assign                         shift and go to state 77
    whileStmt                      shift and go to state 62
    forStmt                        shift and go to state 75
    stmtList                       shift and go to state 76
    var                            shift and go to state 63
    returnStmt                     shift and go to state 69
    ifStmt                         shift and go to state 73
    empty                          shift and go to state 64

state 52

    (19) param -> type ID LBRAC RBRAC .

    COMMA           reduce using rule 19 (param -> type ID LBRAC RBRAC .)
    RPAREN          reduce using rule 19 (param -> type ID LBRAC RBRAC .)


state 53

    (11) varSpec -> ID LBRAC num RBRAC ATTR . LCBRAC literalSeq RCBRAC

    LCBRAC          shift and go to state 78


state 54

    (5) decFunc -> type ID LPAREN paramList RPAREN LCBRAC . block RCBRAC
    (20) block -> . varDecList stmtList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 49
    block                          shift and go to state 79
    varDecList                     shift and go to state 51

state 55

    (21) varDecList -> varDec varDecList .

    IF              reduce using rule 21 (varDecList -> varDec varDecList .)
    WHILE           reduce using rule 21 (varDecList -> varDec varDecList .)
    FOR             reduce using rule 21 (varDecList -> varDec varDecList .)
    BREAK           reduce using rule 21 (varDecList -> varDec varDecList .)
    RETURN          reduce using rule 21 (varDecList -> varDec varDecList .)
    READ            reduce using rule 21 (varDecList -> varDec varDecList .)
    WRITE           reduce using rule 21 (varDecList -> varDec varDecList .)
    ID              reduce using rule 21 (varDecList -> varDec varDecList .)
    RCBRAC          reduce using rule 21 (varDecList -> varDec varDecList .)
    LCBRAC          reduce using rule 21 (varDecList -> varDec varDecList .)


state 56

    (6) decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .

    ID              reduce using rule 6 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    INT             reduce using rule 6 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    STRING          reduce using rule 6 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    BOOL            reduce using rule 6 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    $end            reduce using rule 6 (decProc -> ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)


state 57

    (58) returnStmt -> RETURN . SCOLON
    (59) returnStmt -> RETURN . exp SCOLON
    (60) returnStmt -> RETURN . error SCOLON
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    SCOLON          shift and go to state 81
    error           shift and go to state 86
    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 85
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 58

    (52) stmt -> subCall . SCOLON

    SCOLON          shift and go to state 88


state 59

    (61) readStmt -> READ . var SCOLON
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC

    ID              shift and go to state 90

    var                            shift and go to state 89

state 60

    (55) whileStmt -> WHILE . LPAREN exp RPAREN LCBRAC block RCBRAC

    LPAREN          shift and go to state 91


state 61

    (49) stmt -> readStmt .

    IF              reduce using rule 49 (stmt -> readStmt .)
    WHILE           reduce using rule 49 (stmt -> readStmt .)
    FOR             reduce using rule 49 (stmt -> readStmt .)
    BREAK           reduce using rule 49 (stmt -> readStmt .)
    RETURN          reduce using rule 49 (stmt -> readStmt .)
    READ            reduce using rule 49 (stmt -> readStmt .)
    WRITE           reduce using rule 49 (stmt -> readStmt .)
    ID              reduce using rule 49 (stmt -> readStmt .)
    RCBRAC          reduce using rule 49 (stmt -> readStmt .)
    LCBRAC          reduce using rule 49 (stmt -> readStmt .)


state 62

    (45) stmt -> whileStmt .

    IF              reduce using rule 45 (stmt -> whileStmt .)
    WHILE           reduce using rule 45 (stmt -> whileStmt .)
    FOR             reduce using rule 45 (stmt -> whileStmt .)
    BREAK           reduce using rule 45 (stmt -> whileStmt .)
    RETURN          reduce using rule 45 (stmt -> whileStmt .)
    READ            reduce using rule 45 (stmt -> whileStmt .)
    WRITE           reduce using rule 45 (stmt -> whileStmt .)
    ID              reduce using rule 45 (stmt -> whileStmt .)
    RCBRAC          reduce using rule 45 (stmt -> whileStmt .)
    LCBRAC          reduce using rule 45 (stmt -> whileStmt .)


state 63

    (63) assign -> var . ATTR exp
    (64) assign -> var . AVALPLUS exp
    (65) assign -> var . AVALMINUS exp
    (66) assign -> var . AVALMULT exp
    (67) assign -> var . AVALDIV exp
    (68) assign -> var . AVALMOD exp

    ATTR            shift and go to state 94
    AVALPLUS        shift and go to state 95
    AVALMINUS       shift and go to state 93
    AVALMULT        shift and go to state 96
    AVALDIV         shift and go to state 92
    AVALMOD         shift and go to state 97


state 64

    (75) stmtList -> empty .

    RCBRAC          reduce using rule 75 (stmtList -> empty .)
    LCBRAC          reduce using rule 75 (stmtList -> empty .)


state 65

    (56) forStmt -> FOR . LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC

    LPAREN          shift and go to state 98


state 66

    (47) stmt -> breakStmt .

    IF              reduce using rule 47 (stmt -> breakStmt .)
    WHILE           reduce using rule 47 (stmt -> breakStmt .)
    FOR             reduce using rule 47 (stmt -> breakStmt .)
    BREAK           reduce using rule 47 (stmt -> breakStmt .)
    RETURN          reduce using rule 47 (stmt -> breakStmt .)
    READ            reduce using rule 47 (stmt -> breakStmt .)
    WRITE           reduce using rule 47 (stmt -> breakStmt .)
    ID              reduce using rule 47 (stmt -> breakStmt .)
    RCBRAC          reduce using rule 47 (stmt -> breakStmt .)
    LCBRAC          reduce using rule 47 (stmt -> breakStmt .)


state 67

    (74) stmtList -> stmt . stmtList
    (74) stmtList -> . stmt stmtList
    (75) stmtList -> . empty
    (44) stmt -> . ifStmt
    (45) stmt -> . whileStmt
    (46) stmt -> . forStmt
    (47) stmt -> . breakStmt
    (48) stmt -> . returnStmt
    (49) stmt -> . readStmt
    (50) stmt -> . writeStmt
    (51) stmt -> . assign SCOLON
    (52) stmt -> . subCall SCOLON
    (90) empty -> .
    (53) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC
    (54) ifStmt -> . IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (55) whileStmt -> . WHILE LPAREN exp RPAREN LCBRAC block RCBRAC
    (56) forStmt -> . FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (57) breakStmt -> . BREAK SCOLON
    (58) returnStmt -> . RETURN SCOLON
    (59) returnStmt -> . RETURN exp SCOLON
    (60) returnStmt -> . RETURN error SCOLON
    (61) readStmt -> . READ var SCOLON
    (62) writeStmt -> . WRITE expList SCOLON
    (63) assign -> . var ATTR exp
    (64) assign -> . var AVALPLUS exp
    (65) assign -> . var AVALMINUS exp
    (66) assign -> . var AVALMULT exp
    (67) assign -> . var AVALDIV exp
    (68) assign -> . var AVALMOD exp
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC

    RCBRAC          reduce using rule 90 (empty -> .)
    LCBRAC          reduce using rule 90 (empty -> .)
    IF              shift and go to state 71
    WHILE           shift and go to state 60
    FOR             shift and go to state 65
    BREAK           shift and go to state 74
    RETURN          shift and go to state 57
    READ            shift and go to state 59
    WRITE           shift and go to state 68
    ID              shift and go to state 70

    writeStmt                      shift and go to state 72
    readStmt                       shift and go to state 61
    breakStmt                      shift and go to state 66
    stmt                           shift and go to state 67
    assign                         shift and go to state 77
    whileStmt                      shift and go to state 62
    forStmt                        shift and go to state 75
    stmtList                       shift and go to state 99
    var                            shift and go to state 63
    returnStmt                     shift and go to state 69
    ifStmt                         shift and go to state 73
    empty                          shift and go to state 64
    subCall                        shift and go to state 58

state 68

    (62) writeStmt -> WRITE . expList SCOLON
    (70) expList -> . expSeq
    (71) expList -> . empty
    (72) expSeq -> . exp COMMA expSeq
    (73) expSeq -> . exp
    (90) empty -> .
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    SCOLON          reduce using rule 90 (empty -> .)
    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    expSeq                         shift and go to state 100
    str                            shift and go to state 39
    exp                            shift and go to state 103
    logic                          shift and go to state 40
    var                            shift and go to state 83
    expList                        shift and go to state 101
    empty                          shift and go to state 102

state 69

    (48) stmt -> returnStmt .

    IF              reduce using rule 48 (stmt -> returnStmt .)
    WHILE           reduce using rule 48 (stmt -> returnStmt .)
    FOR             reduce using rule 48 (stmt -> returnStmt .)
    BREAK           reduce using rule 48 (stmt -> returnStmt .)
    RETURN          reduce using rule 48 (stmt -> returnStmt .)
    READ            reduce using rule 48 (stmt -> returnStmt .)
    WRITE           reduce using rule 48 (stmt -> returnStmt .)
    ID              reduce using rule 48 (stmt -> returnStmt .)
    RCBRAC          reduce using rule 48 (stmt -> returnStmt .)
    LCBRAC          reduce using rule 48 (stmt -> returnStmt .)


state 70

    (69) subCall -> ID . LPAREN expList RPAREN
    (23) var -> ID .
    (24) var -> ID . LBRAC exp RBRAC

    LPAREN          shift and go to state 104
    PLUS            reduce using rule 23 (var -> ID .)
    MINUS           reduce using rule 23 (var -> ID .)
    MULT            reduce using rule 23 (var -> ID .)
    DIV             reduce using rule 23 (var -> ID .)
    MOD             reduce using rule 23 (var -> ID .)
    EQUAL           reduce using rule 23 (var -> ID .)
    DIFF            reduce using rule 23 (var -> ID .)
    LESSEQ          reduce using rule 23 (var -> ID .)
    GREATEQ         reduce using rule 23 (var -> ID .)
    GREATER         reduce using rule 23 (var -> ID .)
    LESS            reduce using rule 23 (var -> ID .)
    AND             reduce using rule 23 (var -> ID .)
    OR              reduce using rule 23 (var -> ID .)
    QMARK           reduce using rule 23 (var -> ID .)
    SCOLON          reduce using rule 23 (var -> ID .)
    COMMA           reduce using rule 23 (var -> ID .)
    RPAREN          reduce using rule 23 (var -> ID .)
    RBRAC           reduce using rule 23 (var -> ID .)
    COLON           reduce using rule 23 (var -> ID .)
    ATTR            reduce using rule 23 (var -> ID .)
    AVALPLUS        reduce using rule 23 (var -> ID .)
    AVALMINUS       reduce using rule 23 (var -> ID .)
    AVALMULT        reduce using rule 23 (var -> ID .)
    AVALDIV         reduce using rule 23 (var -> ID .)
    AVALMOD         reduce using rule 23 (var -> ID .)
    LBRAC           shift and go to state 105


state 71

    (53) ifStmt -> IF . LPAREN exp RPAREN LCBRAC block RCBRAC
    (54) ifStmt -> IF . LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC

    LPAREN          shift and go to state 106


state 72

    (50) stmt -> writeStmt .

    IF              reduce using rule 50 (stmt -> writeStmt .)
    WHILE           reduce using rule 50 (stmt -> writeStmt .)
    FOR             reduce using rule 50 (stmt -> writeStmt .)
    BREAK           reduce using rule 50 (stmt -> writeStmt .)
    RETURN          reduce using rule 50 (stmt -> writeStmt .)
    READ            reduce using rule 50 (stmt -> writeStmt .)
    WRITE           reduce using rule 50 (stmt -> writeStmt .)
    ID              reduce using rule 50 (stmt -> writeStmt .)
    RCBRAC          reduce using rule 50 (stmt -> writeStmt .)
    LCBRAC          reduce using rule 50 (stmt -> writeStmt .)


state 73

    (44) stmt -> ifStmt .

    IF              reduce using rule 44 (stmt -> ifStmt .)
    WHILE           reduce using rule 44 (stmt -> ifStmt .)
    FOR             reduce using rule 44 (stmt -> ifStmt .)
    BREAK           reduce using rule 44 (stmt -> ifStmt .)
    RETURN          reduce using rule 44 (stmt -> ifStmt .)
    READ            reduce using rule 44 (stmt -> ifStmt .)
    WRITE           reduce using rule 44 (stmt -> ifStmt .)
    ID              reduce using rule 44 (stmt -> ifStmt .)
    RCBRAC          reduce using rule 44 (stmt -> ifStmt .)
    LCBRAC          reduce using rule 44 (stmt -> ifStmt .)


state 74

    (57) breakStmt -> BREAK . SCOLON

    SCOLON          shift and go to state 107


state 75

    (46) stmt -> forStmt .

    IF              reduce using rule 46 (stmt -> forStmt .)
    WHILE           reduce using rule 46 (stmt -> forStmt .)
    FOR             reduce using rule 46 (stmt -> forStmt .)
    BREAK           reduce using rule 46 (stmt -> forStmt .)
    RETURN          reduce using rule 46 (stmt -> forStmt .)
    READ            reduce using rule 46 (stmt -> forStmt .)
    WRITE           reduce using rule 46 (stmt -> forStmt .)
    ID              reduce using rule 46 (stmt -> forStmt .)
    RCBRAC          reduce using rule 46 (stmt -> forStmt .)
    LCBRAC          reduce using rule 46 (stmt -> forStmt .)


state 76

    (20) block -> varDecList stmtList .

    RCBRAC          reduce using rule 20 (block -> varDecList stmtList .)
    LCBRAC          reduce using rule 20 (block -> varDecList stmtList .)


state 77

    (51) stmt -> assign . SCOLON

    SCOLON          shift and go to state 108


state 78

    (11) varSpec -> ID LBRAC num RBRAC ATTR LCBRAC . literalSeq RCBRAC
    (14) literalSeq -> . literal COMMA literalSeq
    (15) literalSeq -> . literal
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    literalSeq                     shift and go to state 110
    literal                        shift and go to state 109
    num                            shift and go to state 38
    str                            shift and go to state 39
    logic                          shift and go to state 40

state 79

    (5) decFunc -> type ID LPAREN paramList RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 111


state 80

    (40) exp -> subCall .

    PLUS            reduce using rule 40 (exp -> subCall .)
    MINUS           reduce using rule 40 (exp -> subCall .)
    MULT            reduce using rule 40 (exp -> subCall .)
    DIV             reduce using rule 40 (exp -> subCall .)
    MOD             reduce using rule 40 (exp -> subCall .)
    EQUAL           reduce using rule 40 (exp -> subCall .)
    DIFF            reduce using rule 40 (exp -> subCall .)
    LESSEQ          reduce using rule 40 (exp -> subCall .)
    GREATEQ         reduce using rule 40 (exp -> subCall .)
    GREATER         reduce using rule 40 (exp -> subCall .)
    LESS            reduce using rule 40 (exp -> subCall .)
    AND             reduce using rule 40 (exp -> subCall .)
    OR              reduce using rule 40 (exp -> subCall .)
    QMARK           reduce using rule 40 (exp -> subCall .)
    SCOLON          reduce using rule 40 (exp -> subCall .)
    COMMA           reduce using rule 40 (exp -> subCall .)
    RPAREN          reduce using rule 40 (exp -> subCall .)
    RBRAC           reduce using rule 40 (exp -> subCall .)
    COLON           reduce using rule 40 (exp -> subCall .)


state 81

    (58) returnStmt -> RETURN SCOLON .

    IF              reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    WHILE           reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    FOR             reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    BREAK           reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    RETURN          reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    READ            reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    WRITE           reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    ID              reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    RCBRAC          reduce using rule 58 (returnStmt -> RETURN SCOLON .)
    LCBRAC          reduce using rule 58 (returnStmt -> RETURN SCOLON .)


state 82

    (42) exp -> literal .

    PLUS            reduce using rule 42 (exp -> literal .)
    MINUS           reduce using rule 42 (exp -> literal .)
    MULT            reduce using rule 42 (exp -> literal .)
    DIV             reduce using rule 42 (exp -> literal .)
    MOD             reduce using rule 42 (exp -> literal .)
    EQUAL           reduce using rule 42 (exp -> literal .)
    DIFF            reduce using rule 42 (exp -> literal .)
    LESSEQ          reduce using rule 42 (exp -> literal .)
    GREATEQ         reduce using rule 42 (exp -> literal .)
    GREATER         reduce using rule 42 (exp -> literal .)
    LESS            reduce using rule 42 (exp -> literal .)
    AND             reduce using rule 42 (exp -> literal .)
    OR              reduce using rule 42 (exp -> literal .)
    QMARK           reduce using rule 42 (exp -> literal .)
    SCOLON          reduce using rule 42 (exp -> literal .)
    COMMA           reduce using rule 42 (exp -> literal .)
    RPAREN          reduce using rule 42 (exp -> literal .)
    RBRAC           reduce using rule 42 (exp -> literal .)
    COLON           reduce using rule 42 (exp -> literal .)


state 83

    (41) exp -> var .

    PLUS            reduce using rule 41 (exp -> var .)
    MINUS           reduce using rule 41 (exp -> var .)
    MULT            reduce using rule 41 (exp -> var .)
    DIV             reduce using rule 41 (exp -> var .)
    MOD             reduce using rule 41 (exp -> var .)
    EQUAL           reduce using rule 41 (exp -> var .)
    DIFF            reduce using rule 41 (exp -> var .)
    LESSEQ          reduce using rule 41 (exp -> var .)
    GREATEQ         reduce using rule 41 (exp -> var .)
    GREATER         reduce using rule 41 (exp -> var .)
    LESS            reduce using rule 41 (exp -> var .)
    AND             reduce using rule 41 (exp -> var .)
    OR              reduce using rule 41 (exp -> var .)
    QMARK           reduce using rule 41 (exp -> var .)
    SCOLON          reduce using rule 41 (exp -> var .)
    COMMA           reduce using rule 41 (exp -> var .)
    RPAREN          reduce using rule 41 (exp -> var .)
    RBRAC           reduce using rule 41 (exp -> var .)
    COLON           reduce using rule 41 (exp -> var .)


state 84

    (43) exp -> LPAREN . exp RPAREN
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 112
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 85

    (59) returnStmt -> RETURN exp . SCOLON
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          shift and go to state 119
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 86

    (60) returnStmt -> RETURN error . SCOLON

    SCOLON          shift and go to state 128


state 87

    (38) exp -> NOT . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 129
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 88

    (52) stmt -> subCall SCOLON .

    IF              reduce using rule 52 (stmt -> subCall SCOLON .)
    WHILE           reduce using rule 52 (stmt -> subCall SCOLON .)
    FOR             reduce using rule 52 (stmt -> subCall SCOLON .)
    BREAK           reduce using rule 52 (stmt -> subCall SCOLON .)
    RETURN          reduce using rule 52 (stmt -> subCall SCOLON .)
    READ            reduce using rule 52 (stmt -> subCall SCOLON .)
    WRITE           reduce using rule 52 (stmt -> subCall SCOLON .)
    ID              reduce using rule 52 (stmt -> subCall SCOLON .)
    RCBRAC          reduce using rule 52 (stmt -> subCall SCOLON .)
    LCBRAC          reduce using rule 52 (stmt -> subCall SCOLON .)


state 89

    (61) readStmt -> READ var . SCOLON

    SCOLON          shift and go to state 130


state 90

    (23) var -> ID .
    (24) var -> ID . LBRAC exp RBRAC

    ATTR            reduce using rule 23 (var -> ID .)
    AVALPLUS        reduce using rule 23 (var -> ID .)
    AVALMINUS       reduce using rule 23 (var -> ID .)
    AVALMULT        reduce using rule 23 (var -> ID .)
    AVALDIV         reduce using rule 23 (var -> ID .)
    AVALMOD         reduce using rule 23 (var -> ID .)
    SCOLON          reduce using rule 23 (var -> ID .)
    LBRAC           shift and go to state 105


state 91

    (55) whileStmt -> WHILE LPAREN . exp RPAREN LCBRAC block RCBRAC
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 131
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 92

    (67) assign -> var AVALDIV . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 132
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 93

    (65) assign -> var AVALMINUS . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 133
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 94

    (63) assign -> var ATTR . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 134
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 95

    (64) assign -> var AVALPLUS . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 135
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 96

    (66) assign -> var AVALMULT . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 136
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 97

    (68) assign -> var AVALMOD . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 137
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 98

    (56) forStmt -> FOR LPAREN . assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (63) assign -> . var ATTR exp
    (64) assign -> . var AVALPLUS exp
    (65) assign -> . var AVALMINUS exp
    (66) assign -> . var AVALMULT exp
    (67) assign -> . var AVALDIV exp
    (68) assign -> . var AVALMOD exp
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC

    ID              shift and go to state 90

    var                            shift and go to state 63
    assign                         shift and go to state 138

state 99

    (74) stmtList -> stmt stmtList .

    RCBRAC          reduce using rule 74 (stmtList -> stmt stmtList .)
    LCBRAC          reduce using rule 74 (stmtList -> stmt stmtList .)


state 100

    (70) expList -> expSeq .

    SCOLON          reduce using rule 70 (expList -> expSeq .)
    RPAREN          reduce using rule 70 (expList -> expSeq .)


state 101

    (62) writeStmt -> WRITE expList . SCOLON

    SCOLON          shift and go to state 139


state 102

    (71) expList -> empty .

    SCOLON          reduce using rule 71 (expList -> empty .)
    RPAREN          reduce using rule 71 (expList -> empty .)


state 103

    (72) expSeq -> exp . COMMA expSeq
    (73) expSeq -> exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    COMMA           shift and go to state 140
    SCOLON          reduce using rule 73 (expSeq -> exp .)
    RPAREN          reduce using rule 73 (expSeq -> exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 104

    (69) subCall -> ID LPAREN . expList RPAREN
    (70) expList -> . expSeq
    (71) expList -> . empty
    (72) expSeq -> . exp COMMA expSeq
    (73) expSeq -> . exp
    (90) empty -> .
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    RPAREN          reduce using rule 90 (empty -> .)
    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    expSeq                         shift and go to state 100
    str                            shift and go to state 39
    exp                            shift and go to state 103
    logic                          shift and go to state 40
    var                            shift and go to state 83
    expList                        shift and go to state 141
    empty                          shift and go to state 102

state 105

    (24) var -> ID LBRAC . exp RBRAC
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 142
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 106

    (53) ifStmt -> IF LPAREN . exp RPAREN LCBRAC block RCBRAC
    (54) ifStmt -> IF LPAREN . exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 143
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 107

    (57) breakStmt -> BREAK SCOLON .

    IF              reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    WHILE           reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    FOR             reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    BREAK           reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    RETURN          reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    READ            reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    WRITE           reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    ID              reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    RCBRAC          reduce using rule 57 (breakStmt -> BREAK SCOLON .)
    LCBRAC          reduce using rule 57 (breakStmt -> BREAK SCOLON .)


state 108

    (51) stmt -> assign SCOLON .

    IF              reduce using rule 51 (stmt -> assign SCOLON .)
    WHILE           reduce using rule 51 (stmt -> assign SCOLON .)
    FOR             reduce using rule 51 (stmt -> assign SCOLON .)
    BREAK           reduce using rule 51 (stmt -> assign SCOLON .)
    RETURN          reduce using rule 51 (stmt -> assign SCOLON .)
    READ            reduce using rule 51 (stmt -> assign SCOLON .)
    WRITE           reduce using rule 51 (stmt -> assign SCOLON .)
    ID              reduce using rule 51 (stmt -> assign SCOLON .)
    RCBRAC          reduce using rule 51 (stmt -> assign SCOLON .)
    LCBRAC          reduce using rule 51 (stmt -> assign SCOLON .)


state 109

    (14) literalSeq -> literal . COMMA literalSeq
    (15) literalSeq -> literal .

    COMMA           shift and go to state 144
    RCBRAC          reduce using rule 15 (literalSeq -> literal .)


state 110

    (11) varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq . RCBRAC

    RCBRAC          shift and go to state 145


state 111

    (5) decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .

    ID              reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    INT             reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    STRING          reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    BOOL            reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)
    $end            reduce using rule 5 (decFunc -> type ID LPAREN paramList RPAREN LCBRAC block RCBRAC .)


state 112

    (43) exp -> LPAREN exp . RPAREN
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    RPAREN          shift and go to state 146
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 113

    (36) exp -> exp AND . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 147
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 114

    (34) exp -> exp GREATER . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 148
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 115

    (33) exp -> exp GREATEQ . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 149
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 116

    (35) exp -> exp LESS . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 150
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 117

    (39) exp -> exp QMARK . exp COLON exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 151
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 118

    (30) exp -> exp EQUAL . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 152
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 119

    (59) returnStmt -> RETURN exp SCOLON .

    IF              reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    WHILE           reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    FOR             reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    BREAK           reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    RETURN          reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    READ            reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    WRITE           reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    ID              reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    RCBRAC          reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)
    LCBRAC          reduce using rule 59 (returnStmt -> RETURN exp SCOLON .)


state 120

    (37) exp -> exp OR . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 153
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 121

    (32) exp -> exp LESSEQ . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 154
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 122

    (25) exp -> exp PLUS . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 155
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 123

    (31) exp -> exp DIFF . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 156
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 124

    (28) exp -> exp DIV . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 157
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 125

    (26) exp -> exp MINUS . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 158
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 126

    (27) exp -> exp MULT . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 159
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 127

    (29) exp -> exp MOD . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 160
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 128

    (60) returnStmt -> RETURN error SCOLON .

    IF              reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    WHILE           reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    FOR             reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    BREAK           reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    RETURN          reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    READ            reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    WRITE           reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    ID              reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    RCBRAC          reduce using rule 60 (returnStmt -> RETURN error SCOLON .)
    LCBRAC          reduce using rule 60 (returnStmt -> RETURN error SCOLON .)


state 129

    (38) exp -> NOT exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 38 (exp -> NOT exp .)
    MINUS           reduce using rule 38 (exp -> NOT exp .)
    MULT            reduce using rule 38 (exp -> NOT exp .)
    DIV             reduce using rule 38 (exp -> NOT exp .)
    MOD             reduce using rule 38 (exp -> NOT exp .)
    SCOLON          reduce using rule 38 (exp -> NOT exp .)
    COMMA           reduce using rule 38 (exp -> NOT exp .)
    RPAREN          reduce using rule 38 (exp -> NOT exp .)
    RBRAC           reduce using rule 38 (exp -> NOT exp .)
    COLON           reduce using rule 38 (exp -> NOT exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 38 (exp -> NOT exp .) ]
  ! DIFF            [ reduce using rule 38 (exp -> NOT exp .) ]
  ! LESSEQ          [ reduce using rule 38 (exp -> NOT exp .) ]
  ! GREATEQ         [ reduce using rule 38 (exp -> NOT exp .) ]
  ! GREATER         [ reduce using rule 38 (exp -> NOT exp .) ]
  ! LESS            [ reduce using rule 38 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 38 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 38 (exp -> NOT exp .) ]
  ! QMARK           [ reduce using rule 38 (exp -> NOT exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]


state 130

    (61) readStmt -> READ var SCOLON .

    IF              reduce using rule 61 (readStmt -> READ var SCOLON .)
    WHILE           reduce using rule 61 (readStmt -> READ var SCOLON .)
    FOR             reduce using rule 61 (readStmt -> READ var SCOLON .)
    BREAK           reduce using rule 61 (readStmt -> READ var SCOLON .)
    RETURN          reduce using rule 61 (readStmt -> READ var SCOLON .)
    READ            reduce using rule 61 (readStmt -> READ var SCOLON .)
    WRITE           reduce using rule 61 (readStmt -> READ var SCOLON .)
    ID              reduce using rule 61 (readStmt -> READ var SCOLON .)
    RCBRAC          reduce using rule 61 (readStmt -> READ var SCOLON .)
    LCBRAC          reduce using rule 61 (readStmt -> READ var SCOLON .)


state 131

    (55) whileStmt -> WHILE LPAREN exp . RPAREN LCBRAC block RCBRAC
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 132

    (67) assign -> var AVALDIV exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 67 (assign -> var AVALDIV exp .)
    RPAREN          reduce using rule 67 (assign -> var AVALDIV exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 133

    (65) assign -> var AVALMINUS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 65 (assign -> var AVALMINUS exp .)
    RPAREN          reduce using rule 65 (assign -> var AVALMINUS exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 134

    (63) assign -> var ATTR exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 63 (assign -> var ATTR exp .)
    RPAREN          reduce using rule 63 (assign -> var ATTR exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 135

    (64) assign -> var AVALPLUS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 64 (assign -> var AVALPLUS exp .)
    RPAREN          reduce using rule 64 (assign -> var AVALPLUS exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 136

    (66) assign -> var AVALMULT exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 66 (assign -> var AVALMULT exp .)
    RPAREN          reduce using rule 66 (assign -> var AVALMULT exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 137

    (68) assign -> var AVALMOD exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          reduce using rule 68 (assign -> var AVALMOD exp .)
    RPAREN          reduce using rule 68 (assign -> var AVALMOD exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 138

    (56) forStmt -> FOR LPAREN assign . SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC

    SCOLON          shift and go to state 162


state 139

    (62) writeStmt -> WRITE expList SCOLON .

    IF              reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    WHILE           reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    FOR             reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    BREAK           reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    RETURN          reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    READ            reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    WRITE           reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    ID              reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    RCBRAC          reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)
    LCBRAC          reduce using rule 62 (writeStmt -> WRITE expList SCOLON .)


state 140

    (72) expSeq -> exp COMMA . expSeq
    (72) expSeq -> . exp COMMA expSeq
    (73) expSeq -> . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    expSeq                         shift and go to state 163
    str                            shift and go to state 39
    exp                            shift and go to state 103
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 141

    (69) subCall -> ID LPAREN expList . RPAREN

    RPAREN          shift and go to state 164


state 142

    (24) var -> ID LBRAC exp . RBRAC
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    RBRAC           shift and go to state 165
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 143

    (53) ifStmt -> IF LPAREN exp . RPAREN LCBRAC block RCBRAC
    (54) ifStmt -> IF LPAREN exp . RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    RPAREN          shift and go to state 166
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 144

    (14) literalSeq -> literal COMMA . literalSeq
    (14) literalSeq -> . literal COMMA literalSeq
    (15) literalSeq -> . literal
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    literalSeq                     shift and go to state 167
    literal                        shift and go to state 109
    num                            shift and go to state 38
    str                            shift and go to state 39
    logic                          shift and go to state 40

state 145

    (11) varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC .

    COMMA           reduce using rule 11 (varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC .)
    SCOLON          reduce using rule 11 (varSpec -> ID LBRAC num RBRAC ATTR LCBRAC literalSeq RCBRAC .)


state 146

    (43) exp -> LPAREN exp RPAREN .

    PLUS            reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    MULT            reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    MOD             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    EQUAL           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    DIFF            reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    LESSEQ          reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    GREATEQ         reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    GREATER         reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    LESS            reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    QMARK           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    SCOLON          reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    RBRAC           reduce using rule 43 (exp -> LPAREN exp RPAREN .)
    COLON           reduce using rule 43 (exp -> LPAREN exp RPAREN .)


state 147

    (36) exp -> exp AND exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 36 (exp -> exp AND exp .)
    MINUS           reduce using rule 36 (exp -> exp AND exp .)
    MULT            reduce using rule 36 (exp -> exp AND exp .)
    DIV             reduce using rule 36 (exp -> exp AND exp .)
    MOD             reduce using rule 36 (exp -> exp AND exp .)
    EQUAL           reduce using rule 36 (exp -> exp AND exp .)
    DIFF            reduce using rule 36 (exp -> exp AND exp .)
    LESSEQ          reduce using rule 36 (exp -> exp AND exp .)
    GREATEQ         reduce using rule 36 (exp -> exp AND exp .)
    GREATER         reduce using rule 36 (exp -> exp AND exp .)
    LESS            reduce using rule 36 (exp -> exp AND exp .)
    AND             reduce using rule 36 (exp -> exp AND exp .)
    SCOLON          reduce using rule 36 (exp -> exp AND exp .)
    COMMA           reduce using rule 36 (exp -> exp AND exp .)
    RPAREN          reduce using rule 36 (exp -> exp AND exp .)
    RBRAC           reduce using rule 36 (exp -> exp AND exp .)
    COLON           reduce using rule 36 (exp -> exp AND exp .)
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! OR              [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! QMARK           [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! EQUAL           [ shift and go to state 118 ]
  ! DIFF            [ shift and go to state 123 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]
  ! AND             [ shift and go to state 113 ]


state 148

    (34) exp -> exp GREATER exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 34 (exp -> exp GREATER exp .)
    MINUS           reduce using rule 34 (exp -> exp GREATER exp .)
    MULT            reduce using rule 34 (exp -> exp GREATER exp .)
    DIV             reduce using rule 34 (exp -> exp GREATER exp .)
    MOD             reduce using rule 34 (exp -> exp GREATER exp .)
    LESSEQ          reduce using rule 34 (exp -> exp GREATER exp .)
    GREATEQ         reduce using rule 34 (exp -> exp GREATER exp .)
    GREATER         reduce using rule 34 (exp -> exp GREATER exp .)
    LESS            reduce using rule 34 (exp -> exp GREATER exp .)
    SCOLON          reduce using rule 34 (exp -> exp GREATER exp .)
    COMMA           reduce using rule 34 (exp -> exp GREATER exp .)
    RPAREN          reduce using rule 34 (exp -> exp GREATER exp .)
    RBRAC           reduce using rule 34 (exp -> exp GREATER exp .)
    COLON           reduce using rule 34 (exp -> exp GREATER exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 34 (exp -> exp GREATER exp .) ]
  ! DIFF            [ reduce using rule 34 (exp -> exp GREATER exp .) ]
  ! AND             [ reduce using rule 34 (exp -> exp GREATER exp .) ]
  ! OR              [ reduce using rule 34 (exp -> exp GREATER exp .) ]
  ! QMARK           [ reduce using rule 34 (exp -> exp GREATER exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]


state 149

    (33) exp -> exp GREATEQ exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 33 (exp -> exp GREATEQ exp .)
    MINUS           reduce using rule 33 (exp -> exp GREATEQ exp .)
    MULT            reduce using rule 33 (exp -> exp GREATEQ exp .)
    DIV             reduce using rule 33 (exp -> exp GREATEQ exp .)
    MOD             reduce using rule 33 (exp -> exp GREATEQ exp .)
    LESSEQ          reduce using rule 33 (exp -> exp GREATEQ exp .)
    GREATEQ         reduce using rule 33 (exp -> exp GREATEQ exp .)
    GREATER         reduce using rule 33 (exp -> exp GREATEQ exp .)
    LESS            reduce using rule 33 (exp -> exp GREATEQ exp .)
    SCOLON          reduce using rule 33 (exp -> exp GREATEQ exp .)
    COMMA           reduce using rule 33 (exp -> exp GREATEQ exp .)
    RPAREN          reduce using rule 33 (exp -> exp GREATEQ exp .)
    RBRAC           reduce using rule 33 (exp -> exp GREATEQ exp .)
    COLON           reduce using rule 33 (exp -> exp GREATEQ exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 33 (exp -> exp GREATEQ exp .) ]
  ! DIFF            [ reduce using rule 33 (exp -> exp GREATEQ exp .) ]
  ! AND             [ reduce using rule 33 (exp -> exp GREATEQ exp .) ]
  ! OR              [ reduce using rule 33 (exp -> exp GREATEQ exp .) ]
  ! QMARK           [ reduce using rule 33 (exp -> exp GREATEQ exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]


state 150

    (35) exp -> exp LESS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 35 (exp -> exp LESS exp .)
    MINUS           reduce using rule 35 (exp -> exp LESS exp .)
    MULT            reduce using rule 35 (exp -> exp LESS exp .)
    DIV             reduce using rule 35 (exp -> exp LESS exp .)
    MOD             reduce using rule 35 (exp -> exp LESS exp .)
    LESSEQ          reduce using rule 35 (exp -> exp LESS exp .)
    GREATEQ         reduce using rule 35 (exp -> exp LESS exp .)
    GREATER         reduce using rule 35 (exp -> exp LESS exp .)
    LESS            reduce using rule 35 (exp -> exp LESS exp .)
    SCOLON          reduce using rule 35 (exp -> exp LESS exp .)
    COMMA           reduce using rule 35 (exp -> exp LESS exp .)
    RPAREN          reduce using rule 35 (exp -> exp LESS exp .)
    RBRAC           reduce using rule 35 (exp -> exp LESS exp .)
    COLON           reduce using rule 35 (exp -> exp LESS exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 35 (exp -> exp LESS exp .) ]
  ! DIFF            [ reduce using rule 35 (exp -> exp LESS exp .) ]
  ! AND             [ reduce using rule 35 (exp -> exp LESS exp .) ]
  ! OR              [ reduce using rule 35 (exp -> exp LESS exp .) ]
  ! QMARK           [ reduce using rule 35 (exp -> exp LESS exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]


state 151

    (39) exp -> exp QMARK exp . COLON exp
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    COLON           shift and go to state 168
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 152

    (30) exp -> exp EQUAL exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 30 (exp -> exp EQUAL exp .)
    MINUS           reduce using rule 30 (exp -> exp EQUAL exp .)
    MULT            reduce using rule 30 (exp -> exp EQUAL exp .)
    DIV             reduce using rule 30 (exp -> exp EQUAL exp .)
    MOD             reduce using rule 30 (exp -> exp EQUAL exp .)
    EQUAL           reduce using rule 30 (exp -> exp EQUAL exp .)
    DIFF            reduce using rule 30 (exp -> exp EQUAL exp .)
    LESSEQ          reduce using rule 30 (exp -> exp EQUAL exp .)
    GREATEQ         reduce using rule 30 (exp -> exp EQUAL exp .)
    GREATER         reduce using rule 30 (exp -> exp EQUAL exp .)
    LESS            reduce using rule 30 (exp -> exp EQUAL exp .)
    SCOLON          reduce using rule 30 (exp -> exp EQUAL exp .)
    COMMA           reduce using rule 30 (exp -> exp EQUAL exp .)
    RPAREN          reduce using rule 30 (exp -> exp EQUAL exp .)
    RBRAC           reduce using rule 30 (exp -> exp EQUAL exp .)
    COLON           reduce using rule 30 (exp -> exp EQUAL exp .)
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! AND             [ reduce using rule 30 (exp -> exp EQUAL exp .) ]
  ! OR              [ reduce using rule 30 (exp -> exp EQUAL exp .) ]
  ! QMARK           [ reduce using rule 30 (exp -> exp EQUAL exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! EQUAL           [ shift and go to state 118 ]
  ! DIFF            [ shift and go to state 123 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]


state 153

    (37) exp -> exp OR exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 37 (exp -> exp OR exp .)
    MINUS           reduce using rule 37 (exp -> exp OR exp .)
    MULT            reduce using rule 37 (exp -> exp OR exp .)
    DIV             reduce using rule 37 (exp -> exp OR exp .)
    MOD             reduce using rule 37 (exp -> exp OR exp .)
    EQUAL           reduce using rule 37 (exp -> exp OR exp .)
    DIFF            reduce using rule 37 (exp -> exp OR exp .)
    LESSEQ          reduce using rule 37 (exp -> exp OR exp .)
    GREATEQ         reduce using rule 37 (exp -> exp OR exp .)
    GREATER         reduce using rule 37 (exp -> exp OR exp .)
    LESS            reduce using rule 37 (exp -> exp OR exp .)
    AND             reduce using rule 37 (exp -> exp OR exp .)
    OR              reduce using rule 37 (exp -> exp OR exp .)
    SCOLON          reduce using rule 37 (exp -> exp OR exp .)
    COMMA           reduce using rule 37 (exp -> exp OR exp .)
    RPAREN          reduce using rule 37 (exp -> exp OR exp .)
    RBRAC           reduce using rule 37 (exp -> exp OR exp .)
    COLON           reduce using rule 37 (exp -> exp OR exp .)
    QMARK           shift and go to state 117

  ! QMARK           [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! EQUAL           [ shift and go to state 118 ]
  ! DIFF            [ shift and go to state 123 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]
  ! AND             [ shift and go to state 113 ]
  ! OR              [ shift and go to state 120 ]


state 154

    (32) exp -> exp LESSEQ exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 32 (exp -> exp LESSEQ exp .)
    MINUS           reduce using rule 32 (exp -> exp LESSEQ exp .)
    MULT            reduce using rule 32 (exp -> exp LESSEQ exp .)
    DIV             reduce using rule 32 (exp -> exp LESSEQ exp .)
    MOD             reduce using rule 32 (exp -> exp LESSEQ exp .)
    LESSEQ          reduce using rule 32 (exp -> exp LESSEQ exp .)
    GREATEQ         reduce using rule 32 (exp -> exp LESSEQ exp .)
    GREATER         reduce using rule 32 (exp -> exp LESSEQ exp .)
    LESS            reduce using rule 32 (exp -> exp LESSEQ exp .)
    SCOLON          reduce using rule 32 (exp -> exp LESSEQ exp .)
    COMMA           reduce using rule 32 (exp -> exp LESSEQ exp .)
    RPAREN          reduce using rule 32 (exp -> exp LESSEQ exp .)
    RBRAC           reduce using rule 32 (exp -> exp LESSEQ exp .)
    COLON           reduce using rule 32 (exp -> exp LESSEQ exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 32 (exp -> exp LESSEQ exp .) ]
  ! DIFF            [ reduce using rule 32 (exp -> exp LESSEQ exp .) ]
  ! AND             [ reduce using rule 32 (exp -> exp LESSEQ exp .) ]
  ! OR              [ reduce using rule 32 (exp -> exp LESSEQ exp .) ]
  ! QMARK           [ reduce using rule 32 (exp -> exp LESSEQ exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]


state 155

    (25) exp -> exp PLUS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 25 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 25 (exp -> exp PLUS exp .)
    MULT            reduce using rule 25 (exp -> exp PLUS exp .)
    DIV             reduce using rule 25 (exp -> exp PLUS exp .)
    MOD             reduce using rule 25 (exp -> exp PLUS exp .)
    SCOLON          reduce using rule 25 (exp -> exp PLUS exp .)
    COMMA           reduce using rule 25 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 25 (exp -> exp PLUS exp .)
    RBRAC           reduce using rule 25 (exp -> exp PLUS exp .)
    COLON           reduce using rule 25 (exp -> exp PLUS exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! DIFF            [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! LESSEQ          [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! GREATEQ         [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! GREATER         [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! LESS            [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! AND             [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! OR              [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! QMARK           [ reduce using rule 25 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]


state 156

    (31) exp -> exp DIFF exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 31 (exp -> exp DIFF exp .)
    MINUS           reduce using rule 31 (exp -> exp DIFF exp .)
    MULT            reduce using rule 31 (exp -> exp DIFF exp .)
    DIV             reduce using rule 31 (exp -> exp DIFF exp .)
    MOD             reduce using rule 31 (exp -> exp DIFF exp .)
    EQUAL           reduce using rule 31 (exp -> exp DIFF exp .)
    DIFF            reduce using rule 31 (exp -> exp DIFF exp .)
    LESSEQ          reduce using rule 31 (exp -> exp DIFF exp .)
    GREATEQ         reduce using rule 31 (exp -> exp DIFF exp .)
    GREATER         reduce using rule 31 (exp -> exp DIFF exp .)
    LESS            reduce using rule 31 (exp -> exp DIFF exp .)
    SCOLON          reduce using rule 31 (exp -> exp DIFF exp .)
    COMMA           reduce using rule 31 (exp -> exp DIFF exp .)
    RPAREN          reduce using rule 31 (exp -> exp DIFF exp .)
    RBRAC           reduce using rule 31 (exp -> exp DIFF exp .)
    COLON           reduce using rule 31 (exp -> exp DIFF exp .)
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! AND             [ reduce using rule 31 (exp -> exp DIFF exp .) ]
  ! OR              [ reduce using rule 31 (exp -> exp DIFF exp .) ]
  ! QMARK           [ reduce using rule 31 (exp -> exp DIFF exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]
  ! EQUAL           [ shift and go to state 118 ]
  ! DIFF            [ shift and go to state 123 ]
  ! LESSEQ          [ shift and go to state 121 ]
  ! GREATEQ         [ shift and go to state 115 ]
  ! GREATER         [ shift and go to state 114 ]
  ! LESS            [ shift and go to state 116 ]


state 157

    (28) exp -> exp DIV exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    MULT            reduce using rule 28 (exp -> exp DIV exp .)
    DIV             reduce using rule 28 (exp -> exp DIV exp .)
    MOD             reduce using rule 28 (exp -> exp DIV exp .)
    SCOLON          reduce using rule 28 (exp -> exp DIV exp .)
    COMMA           reduce using rule 28 (exp -> exp DIV exp .)
    RPAREN          reduce using rule 28 (exp -> exp DIV exp .)
    RBRAC           reduce using rule 28 (exp -> exp DIV exp .)
    COLON           reduce using rule 28 (exp -> exp DIV exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! PLUS            [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! EQUAL           [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! DIFF            [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! LESSEQ          [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! GREATEQ         [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! GREATER         [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! LESS            [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! AND             [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! OR              [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! QMARK           [ reduce using rule 28 (exp -> exp DIV exp .) ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]


state 158

    (26) exp -> exp MINUS exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    PLUS            reduce using rule 26 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 26 (exp -> exp MINUS exp .)
    MULT            reduce using rule 26 (exp -> exp MINUS exp .)
    DIV             reduce using rule 26 (exp -> exp MINUS exp .)
    MOD             reduce using rule 26 (exp -> exp MINUS exp .)
    SCOLON          reduce using rule 26 (exp -> exp MINUS exp .)
    COMMA           reduce using rule 26 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 26 (exp -> exp MINUS exp .)
    RBRAC           reduce using rule 26 (exp -> exp MINUS exp .)
    COLON           reduce using rule 26 (exp -> exp MINUS exp .)
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! EQUAL           [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! DIFF            [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! LESSEQ          [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! GREATEQ         [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! GREATER         [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! LESS            [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! AND             [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! OR              [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! QMARK           [ reduce using rule 26 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 122 ]
  ! MINUS           [ shift and go to state 125 ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]


state 159

    (27) exp -> exp MULT exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    MULT            reduce using rule 27 (exp -> exp MULT exp .)
    DIV             reduce using rule 27 (exp -> exp MULT exp .)
    MOD             reduce using rule 27 (exp -> exp MULT exp .)
    SCOLON          reduce using rule 27 (exp -> exp MULT exp .)
    COMMA           reduce using rule 27 (exp -> exp MULT exp .)
    RPAREN          reduce using rule 27 (exp -> exp MULT exp .)
    RBRAC           reduce using rule 27 (exp -> exp MULT exp .)
    COLON           reduce using rule 27 (exp -> exp MULT exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! PLUS            [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! EQUAL           [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! DIFF            [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! LESSEQ          [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! GREATEQ         [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! GREATER         [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! LESS            [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! AND             [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! OR              [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! QMARK           [ reduce using rule 27 (exp -> exp MULT exp .) ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]


state 160

    (29) exp -> exp MOD exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    MULT            reduce using rule 29 (exp -> exp MOD exp .)
    DIV             reduce using rule 29 (exp -> exp MOD exp .)
    MOD             reduce using rule 29 (exp -> exp MOD exp .)
    SCOLON          reduce using rule 29 (exp -> exp MOD exp .)
    COMMA           reduce using rule 29 (exp -> exp MOD exp .)
    RPAREN          reduce using rule 29 (exp -> exp MOD exp .)
    RBRAC           reduce using rule 29 (exp -> exp MOD exp .)
    COLON           reduce using rule 29 (exp -> exp MOD exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! PLUS            [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! EQUAL           [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! DIFF            [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! LESSEQ          [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! GREATEQ         [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! GREATER         [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! LESS            [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! AND             [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! OR              [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! QMARK           [ reduce using rule 29 (exp -> exp MOD exp .) ]
  ! MULT            [ shift and go to state 126 ]
  ! DIV             [ shift and go to state 124 ]
  ! MOD             [ shift and go to state 127 ]


state 161

    (55) whileStmt -> WHILE LPAREN exp RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 169


state 162

    (56) forStmt -> FOR LPAREN assign SCOLON . exp SCOLON assign RPAREN LCBRAC block RCBRAC
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 170
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 163

    (72) expSeq -> exp COMMA expSeq .

    SCOLON          reduce using rule 72 (expSeq -> exp COMMA expSeq .)
    RPAREN          reduce using rule 72 (expSeq -> exp COMMA expSeq .)


state 164

    (69) subCall -> ID LPAREN expList RPAREN .

    PLUS            reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    MINUS           reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    MULT            reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    DIV             reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    MOD             reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    EQUAL           reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    DIFF            reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    LESSEQ          reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    GREATEQ         reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    GREATER         reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    LESS            reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    AND             reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    OR              reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    QMARK           reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    SCOLON          reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    COMMA           reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    RPAREN          reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    RBRAC           reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)
    COLON           reduce using rule 69 (subCall -> ID LPAREN expList RPAREN .)


state 165

    (24) var -> ID LBRAC exp RBRAC .

    PLUS            reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    MINUS           reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    MULT            reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    DIV             reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    MOD             reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    EQUAL           reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    DIFF            reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    LESSEQ          reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    GREATEQ         reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    GREATER         reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    LESS            reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    AND             reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    OR              reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    QMARK           reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    SCOLON          reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    COMMA           reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    RPAREN          reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    RBRAC           reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    COLON           reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    ATTR            reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    AVALPLUS        reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    AVALMINUS       reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    AVALMULT        reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    AVALDIV         reduce using rule 24 (var -> ID LBRAC exp RBRAC .)
    AVALMOD         reduce using rule 24 (var -> ID LBRAC exp RBRAC .)


state 166

    (53) ifStmt -> IF LPAREN exp RPAREN . LCBRAC block RCBRAC
    (54) ifStmt -> IF LPAREN exp RPAREN . LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC

    LCBRAC          shift and go to state 171


state 167

    (14) literalSeq -> literal COMMA literalSeq .

    RCBRAC          reduce using rule 14 (literalSeq -> literal COMMA literalSeq .)


state 168

    (39) exp -> exp QMARK exp COLON . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . exp MINUS exp
    (27) exp -> . exp MULT exp
    (28) exp -> . exp DIV exp
    (29) exp -> . exp MOD exp
    (30) exp -> . exp EQUAL exp
    (31) exp -> . exp DIFF exp
    (32) exp -> . exp LESSEQ exp
    (33) exp -> . exp GREATEQ exp
    (34) exp -> . exp GREATER exp
    (35) exp -> . exp LESS exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . NOT exp
    (39) exp -> . exp QMARK exp COLON exp
    (40) exp -> . subCall
    (41) exp -> . var
    (42) exp -> . literal
    (43) exp -> . LPAREN exp RPAREN
    (69) subCall -> . ID LPAREN expList RPAREN
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC
    (76) literal -> . num
    (77) literal -> . str
    (78) literal -> . logic
    (79) num -> . NUM
    (80) str -> . STR
    (81) logic -> . TRUE
    (82) logic -> . FALSE

    NOT             shift and go to state 87
    LPAREN          shift and go to state 84
    ID              shift and go to state 70
    NUM             shift and go to state 33
    STR             shift and go to state 36
    TRUE            shift and go to state 41
    FALSE           shift and go to state 35

    subCall                        shift and go to state 80
    literal                        shift and go to state 82
    num                            shift and go to state 38
    str                            shift and go to state 39
    exp                            shift and go to state 172
    logic                          shift and go to state 40
    var                            shift and go to state 83

state 169

    (55) whileStmt -> WHILE LPAREN exp RPAREN LCBRAC . block RCBRAC
    (20) block -> . varDecList stmtList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    block                          shift and go to state 173
    type                           shift and go to state 49
    empty                          shift and go to state 48
    varDecList                     shift and go to state 51

state 170

    (56) forStmt -> FOR LPAREN assign SCOLON exp . SCOLON assign RPAREN LCBRAC block RCBRAC
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

    SCOLON          shift and go to state 174
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117


state 171

    (53) ifStmt -> IF LPAREN exp RPAREN LCBRAC . block RCBRAC
    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC . block RCBRAC ELSE RCBRAC block LCBRAC
    (20) block -> . varDecList stmtList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    block                          shift and go to state 175
    type                           shift and go to state 49
    empty                          shift and go to state 48
    varDecList                     shift and go to state 51

state 172

    (39) exp -> exp QMARK exp COLON exp .
    (25) exp -> exp . PLUS exp
    (26) exp -> exp . MINUS exp
    (27) exp -> exp . MULT exp
    (28) exp -> exp . DIV exp
    (29) exp -> exp . MOD exp
    (30) exp -> exp . EQUAL exp
    (31) exp -> exp . DIFF exp
    (32) exp -> exp . LESSEQ exp
    (33) exp -> exp . GREATEQ exp
    (34) exp -> exp . GREATER exp
    (35) exp -> exp . LESS exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (39) exp -> exp . QMARK exp COLON exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for DIFF resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for GREATEQ resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for QMARK resolved as shift
    SCOLON          reduce using rule 39 (exp -> exp QMARK exp COLON exp .)
    COMMA           reduce using rule 39 (exp -> exp QMARK exp COLON exp .)
    RPAREN          reduce using rule 39 (exp -> exp QMARK exp COLON exp .)
    RBRAC           reduce using rule 39 (exp -> exp QMARK exp COLON exp .)
    COLON           reduce using rule 39 (exp -> exp QMARK exp COLON exp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 125
    MULT            shift and go to state 126
    DIV             shift and go to state 124
    MOD             shift and go to state 127
    EQUAL           shift and go to state 118
    DIFF            shift and go to state 123
    LESSEQ          shift and go to state 121
    GREATEQ         shift and go to state 115
    GREATER         shift and go to state 114
    LESS            shift and go to state 116
    AND             shift and go to state 113
    OR              shift and go to state 120
    QMARK           shift and go to state 117

  ! PLUS            [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! MINUS           [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! MULT            [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! DIV             [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! MOD             [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! EQUAL           [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! DIFF            [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! LESSEQ          [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! GREATEQ         [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! GREATER         [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! LESS            [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! AND             [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! OR              [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]
  ! QMARK           [ reduce using rule 39 (exp -> exp QMARK exp COLON exp .) ]


state 173

    (55) whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 176


state 174

    (56) forStmt -> FOR LPAREN assign SCOLON exp SCOLON . assign RPAREN LCBRAC block RCBRAC
    (63) assign -> . var ATTR exp
    (64) assign -> . var AVALPLUS exp
    (65) assign -> . var AVALMINUS exp
    (66) assign -> . var AVALMULT exp
    (67) assign -> . var AVALDIV exp
    (68) assign -> . var AVALMOD exp
    (23) var -> . ID
    (24) var -> . ID LBRAC exp RBRAC

    ID              shift and go to state 90

    var                            shift and go to state 63
    assign                         shift and go to state 177

state 175

    (53) ifStmt -> IF LPAREN exp RPAREN LCBRAC block . RCBRAC
    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC block . RCBRAC ELSE RCBRAC block LCBRAC

    RCBRAC          shift and go to state 178


state 176

    (55) whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .

    IF              reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WHILE           reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    FOR             reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    BREAK           reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RETURN          reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    READ            reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WRITE           reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    ID              reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RCBRAC          reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)
    LCBRAC          reduce using rule 55 (whileStmt -> WHILE LPAREN exp RPAREN LCBRAC block RCBRAC .)


state 177

    (56) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign . RPAREN LCBRAC block RCBRAC

    RPAREN          shift and go to state 179


state 178

    (53) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .
    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC . ELSE RCBRAC block LCBRAC

    IF              reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WHILE           reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    FOR             reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    BREAK           reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RETURN          reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    READ            reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    WRITE           reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    ID              reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    RCBRAC          reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    LCBRAC          reduce using rule 53 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC .)
    ELSE            shift and go to state 180


state 179

    (56) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN . LCBRAC block RCBRAC

    LCBRAC          shift and go to state 181


state 180

    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE . RCBRAC block LCBRAC

    RCBRAC          shift and go to state 182


state 181

    (56) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC . block RCBRAC
    (20) block -> . varDecList stmtList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    RCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    empty                          shift and go to state 48
    type                           shift and go to state 49
    block                          shift and go to state 183
    varDecList                     shift and go to state 51

state 182

    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC . block LCBRAC
    (20) block -> . varDecList stmtList
    (21) varDecList -> . varDec varDecList
    (22) varDecList -> . empty
    (7) varDec -> . type varSpecSeq SCOLON
    (90) empty -> .
    (83) type -> . INT
    (84) type -> . STRING
    (85) type -> . BOOL

    IF              reduce using rule 90 (empty -> .)
    WHILE           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    BREAK           reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    WRITE           reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    LCBRAC          reduce using rule 90 (empty -> .)
    INT             shift and go to state 3
    STRING          shift and go to state 11
    BOOL            shift and go to state 7

    varDec                         shift and go to state 47
    block                          shift and go to state 184
    type                           shift and go to state 49
    empty                          shift and go to state 48
    varDecList                     shift and go to state 51

state 183

    (56) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block . RCBRAC

    RCBRAC          shift and go to state 185


state 184

    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block . LCBRAC

    LCBRAC          shift and go to state 186


state 185

    (56) forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .

    IF              reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    WHILE           reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    FOR             reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    BREAK           reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    RETURN          reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    READ            reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    WRITE           reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    ID              reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    RCBRAC          reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)
    LCBRAC          reduce using rule 56 (forStmt -> FOR LPAREN assign SCOLON exp SCOLON assign RPAREN LCBRAC block RCBRAC .)


state 186

    (54) ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .

    IF              reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    WHILE           reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    FOR             reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    BREAK           reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    RETURN          reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    READ            reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    WRITE           reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    ID              reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    RCBRAC          reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)
    LCBRAC          reduce using rule 54 (ifStmt -> IF LPAREN exp RPAREN LCBRAC block RCBRAC ELSE RCBRAC block LCBRAC .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 172 resolved as shift
WARNING: shift/reduce conflict for MULT in state 172 resolved as shift
WARNING: shift/reduce conflict for DIV in state 172 resolved as shift
WARNING: shift/reduce conflict for MOD in state 172 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 172 resolved as shift
WARNING: shift/reduce conflict for DIFF in state 172 resolved as shift
WARNING: shift/reduce conflict for LESSEQ in state 172 resolved as shift
WARNING: shift/reduce conflict for GREATEQ in state 172 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 172 resolved as shift
WARNING: shift/reduce conflict for LESS in state 172 resolved as shift
WARNING: shift/reduce conflict for AND in state 172 resolved as shift
WARNING: shift/reduce conflict for OR in state 172 resolved as shift
WARNING: shift/reduce conflict for QMARK in state 172 resolved as shift
